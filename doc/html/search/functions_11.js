var searchData=
[
  ['test_0',['test',['../writer-tests_8js.html#a50494bdb805ff524327f3bd0d16c85c8',1,'test(&apos;writes char&apos;, function() { var subject=new Writer(2);var result=subject.addChar(&apos;a&apos;).addChar(&apos;b&apos;).addChar(&apos;c&apos;).join();assert.equalBuffers(result, [0x61, 0x62, 0x63]);}):&#160;writer-tests.js'],['../writer-tests_8js.html#aee0813803658bdcce18e3726a3bc2e1a',1,'test(&apos;gets correct byte length&apos;, function() { var subject=new Writer(5);assert.strictEqual(subject.getByteLength(), 0);subject.addInt32(0);assert.strictEqual(subject.getByteLength(), 4);subject.addCString(&quot;!&quot;);assert.strictEqual(subject.getByteLength(), 6);}):&#160;writer-tests.js'],['../writer-tests_8js.html#a74aea07543653a5425a5758922a23b9d',1,'test(&apos;can add arbitrary buffer to the end&apos;, function() { var subject=new Writer(4);subject.addCString(&quot;!!!&quot;) var result=subject.add(Buffer.from(&quot;@@@&quot;)).join();assert.equalBuffers(result, [33, 33, 33, 0, 0x40, 0x40, 0x40]);}):&#160;writer-tests.js'],['../writer-tests_8js.html#a2f7d1404b25e7db6e927b3b7c347ec9f',1,'test(&quot;resizing to much larger&quot;, function() { var subject=new Writer(2);var string=&quot;!!!!!!!!&quot;;var result=subject.addCString(string).flush();assert.equalBuffers(result, [33, 33, 33, 33, 33, 33, 33, 33, 0]);}):&#160;writer-tests.js'],['../test_2call_bound_8js.html#aec6bea608dbb6c1e40d760dbb2a51a74',1,'test(&apos;callBound&apos;, function(t) { t.equal(callBound(&apos;Array.length&apos;), Array.length, &apos;Array.length yields itself&apos;);t.equal(callBound(&apos;%Array.length%&apos;), Array.length, &apos;%Array.length% yields itself&apos;);t.equal(callBound(&apos;Array.prototype&apos;), Array.prototype, &apos;Array.prototype yields itself&apos;);t.equal(callBound(&apos;%Array.prototype%&apos;), Array.prototype, &apos;%Array.prototype% yields itself&apos;);t.equal(callBound(&apos;Array.constructor&apos;), Array.constructor, &apos;Array.constructor yields itself&apos;);t.equal(callBound(&apos;%Array.constructor%&apos;), Array.constructor, &apos;%Array.constructor% yields itself&apos;);t.equal(callBound(&apos;Date.parse&apos;), Date.parse, &apos;Date.parse yields itself&apos;);t.equal(callBound(&apos;%Date.parse%&apos;), Date.parse, &apos;%Date.parse% yields itself&apos;);t.equal(callBound(&apos;Error.prototype.message&apos;), Error.prototype.message, &apos;Error.prototype.message yields itself&apos;);t.equal(callBound(&apos;%Error.prototype.message%&apos;), Error.prototype.message, &apos;%Error.prototype.message% yields itself&apos;);t.notEqual(callBound(&apos;Object.prototype.toString&apos;), Object.prototype.toString, &apos;Object.prototype.toString does not yield itself&apos;);t.notEqual(callBound(&apos;%Object.prototype.toString%&apos;), Object.prototype.toString, &apos;%Object.prototype.toString% does not yield itself&apos;);t.equal(callBound(&apos;Object.prototype.toString&apos;)(true), Object.prototype.toString.call(true), &apos;call-bound Object.prototype.toString calls into the original&apos;);t.equal(callBound(&apos;%Object.prototype.toString%&apos;)(true), Object.prototype.toString.call(true), &apos;call-bound %Object.prototype.toString% calls into the original&apos;);t[&apos;throws&apos;](function() { callBound(&apos;does not exist&apos;);}, SyntaxError, &apos;nonexistent intrinsic throws&apos;);t[&apos;throws&apos;](function() { callBound(&apos;does not exist&apos;, true);}, SyntaxError, &apos;allowMissing arg still throws for unknown intrinsic&apos;);t.test(&apos;real but absent intrinsic&apos;, { skip:typeof WeakRef !==&apos;undefined&apos; }, function(st) { st[&apos;throws&apos;](function() { callBound(&apos;WeakRef&apos;);}, TypeError, &apos;real but absent intrinsic throws&apos;);st.equal(callBound(&apos;WeakRef&apos;, true), undefined, &apos;allowMissing arg avoids exception&apos;);st.end();});t.end();}):&#160;callBound.js'],['../call-bind_2test_2index_8js.html#ab6049aca98eb1e58600daa4a39c4d961',1,'test(&apos;callBind&apos;, function(t) { forEach(v.nonFunctions, function(nonFunction) { t[&apos;throws&apos;](function() { callBind(nonFunction);}, TypeError, inspect(nonFunction)+&apos; is not a function&apos;);});var sentinel={ sentinel:true };var func=function(a, b) { return[!hasStrictMode &amp;&amp;this===global ? undefined :this, a, b];};t.equal(func.length, 2, &apos;original function length is 2&apos;);t.deepEqual(func(), [undefined, undefined, undefined], &apos;unbound func with too few args&apos;);t.deepEqual(func(1, 2), [undefined, 1, 2], &apos;unbound func with right args&apos;);t.deepEqual(func(1, 2, 3), [undefined, 1, 2], &apos;unbound func with too many args&apos;);var bound=callBind(func);t.equal(bound.length, func.length+1, &apos;function length is preserved&apos;, { skip:!functionsHaveConfigurableLengths });t.deepEqual(bound(), [undefined, undefined, undefined], &apos;bound func with too few args&apos;);t.deepEqual(bound(1, 2), [hasStrictMode ? 1 :Object(1), 2, undefined], &apos;bound func with right args&apos;);t.deepEqual(bound(1, 2, 3), [hasStrictMode ? 1 :Object(1), 2, 3], &apos;bound func with too many args&apos;);var boundR=callBind(func, sentinel);t.equal(boundR.length, func.length, &apos;function length is preserved&apos;, { skip:!functionsHaveConfigurableLengths });t.deepEqual(boundR(), [sentinel, undefined, undefined], &apos;bound func with receiver, with too few args&apos;);t.deepEqual(boundR(1, 2), [sentinel, 1, 2], &apos;bound func with receiver, with right args&apos;);t.deepEqual(boundR(1, 2, 3), [sentinel, 1, 2], &apos;bound func with receiver, with too many args&apos;);var boundArg=callBind(func, sentinel, 1);t.equal(boundArg.length, func.length - 1, &apos;function length is preserved&apos;, { skip:!functionsHaveConfigurableLengths });t.deepEqual(boundArg(), [sentinel, 1, undefined], &apos;bound func with receiver and arg, with too few args&apos;);t.deepEqual(boundArg(2), [sentinel, 1, 2], &apos;bound func with receiver and arg, with right arg&apos;);t.deepEqual(boundArg(2, 3), [sentinel, 1, 2], &apos;bound func with receiver and arg, with too many args&apos;);t.test(&apos;callBind.apply&apos;, function(st) { var aBound=callBind.apply(func);st.deepEqual(aBound(sentinel), [sentinel, undefined, undefined], &apos;apply-bound func with no args&apos;);st.deepEqual(aBound(sentinel, [1], 4), [sentinel, 1, undefined], &apos;apply-bound func with too few args&apos;);st.deepEqual(aBound(sentinel, [1, 2], 4), [sentinel, 1, 2], &apos;apply-bound func with right args&apos;);var aBoundArg=callBind.apply(func);st.deepEqual(aBoundArg(sentinel, [1, 2, 3], 4), [sentinel, 1, 2], &apos;apply-bound func with too many args&apos;);st.deepEqual(aBoundArg(sentinel, [1, 2], 4), [sentinel, 1, 2], &apos;apply-bound func with right args&apos;);st.deepEqual(aBoundArg(sentinel, [1], 4), [sentinel, 1, undefined], &apos;apply-bound func with too few args&apos;);var aBoundR=callBind.apply(func, sentinel);st.deepEqual(aBoundR([1, 2, 3], 4), [sentinel, 1, 2], &apos;apply-bound func with receiver and too many args&apos;);st.deepEqual(aBoundR([1, 2], 4), [sentinel, 1, 2], &apos;apply-bound func with receiver and right args&apos;);st.deepEqual(aBoundR([1], 4), [sentinel, 1, undefined], &apos;apply-bound func with receiver and too few args&apos;);st.end();});t.end();}):&#160;index.js'],['../es-define-property_2test_2index_8js.html#afb3ce18a6e666388399f151f29c0ff3b',1,'test(&apos;defineProperty:supported&apos;, { skip:! $defineProperty }, function(t) { t.plan(4);t.equal(typeof $defineProperty, &apos;function&apos;, &apos;defineProperty is supported&apos;);if($defineProperty &amp;&amp;gOPD) { var o={ a:1 }; $defineProperty(o, &apos;b&apos;, { enumerable:true, value:2 });t.deepEqual(gOPD(o, &apos;b&apos;), { configurable:false, enumerable:true, value:2, writable:false }, &apos;property descriptor is as expected&apos;); $defineProperty(o, &apos;c&apos;, { enumerable:false, value:3, writable:true });t.deepEqual(gOPD(o, &apos;c&apos;), { configurable:false, enumerable:false, value:3, writable:true }, &apos;property descriptor is as expected&apos;);} t.equal($defineProperty, Object.defineProperty, &apos;defineProperty is Object.defineProperty&apos;);t.end();}):&#160;index.js'],['../es-define-property_2test_2index_8js.html#a468dd016bcb2e1ab1b9bea2aa2ae4675',1,'test(&apos;defineProperty:not supported&apos;, { skip:!! $defineProperty }, function(t) { t.notOk($defineProperty, &apos;defineProperty is not supported&apos;);t.match(typeof $defineProperty,/^(?:undefined|boolean) $/, &apos;`typeof defineProperty` is `undefined` or `boolean`&apos;);t.end();}):&#160;index.js'],['../es-errors_2test_2index_8js.html#ae840dd4f03719ac778be9eaa35f5a596',1,'test(&apos;errors&apos;, function(t) { t.equal(E, Error);t.equal(R, RangeError);t.equal(Ref, ReferenceError);t.equal(S, SyntaxError);t.equal(T, TypeError);t.end();}):&#160;index.js'],['../function-bind_2test_2index_8js.html#a2cdd7cd86dad2ca5e1ec92a59176fd72',1,'test(&apos;functionBind is a function&apos;, function(t) { t.equal(typeof functionBind, &apos;function&apos;);t.end();}):&#160;index.js'],['../function-bind_2test_2index_8js.html#ae2fa9303bb40685b2429252ff2ffb109',1,'test(&apos;non-functions&apos;, function(t) { var nonFunctions=[true, false, [], {}, 42, &apos;foo&apos;, NaN,/a/g];t.plan(nonFunctions.length);for(var i=0;i&lt; nonFunctions.length;++i) { try { functionBind.call(nonFunctions[i]);} catch(ex) { t.ok(ex instanceof TypeError, &apos;throws when given &apos;+String(nonFunctions[i]));} } t.end();}):&#160;index.js'],['../function-bind_2test_2index_8js.html#adce5eabce649d1c57c1fc662447fd414',1,'test(&apos;without a context&apos;, function(t) { t.test(&apos;binds properly&apos;, function(st) { var args, context;var namespace={ func:functionBind.call(function() { args=Array.prototype.slice.call(arguments);context=this;}) };namespace.func(1, 2, 3);st.deepEqual(args, [1, 2, 3]);st.equal(context, getCurrentContext.call());st.end();});t.test(&apos;binds properly, and still supplies bound arguments&apos;, function(st) { var args, context;var namespace={ func:functionBind.call(function() { args=Array.prototype.slice.call(arguments);context=this;}, undefined, 1, 2, 3) };namespace.func(4, 5, 6);st.deepEqual(args, [1, 2, 3, 4, 5, 6]);st.equal(context, getCurrentContext.call());st.end();});t.test(&apos;returns properly&apos;, function(st) { var args;var namespace={ func:functionBind.call(function() { args=Array.prototype.slice.call(arguments);return this;}, null) };var context=namespace.func(1, 2, 3);st.equal(context, getCurrentContext.call(), &apos;returned context is namespaced context&apos;);st.deepEqual(args, [1, 2, 3], &apos;passed arguments are correct&apos;);st.end();});t.test(&apos;returns properly with bound arguments&apos;, function(st) { var args;var namespace={ func:functionBind.call(function() { args=Array.prototype.slice.call(arguments);return this;}, null, 1, 2, 3) };var context=namespace.func(4, 5, 6);st.equal(context, getCurrentContext.call(), &apos;returned context is namespaced context&apos;);st.deepEqual(args, [1, 2, 3, 4, 5, 6], &apos;passed arguments are correct&apos;);st.end();});t.test(&apos;called as a constructor&apos;, function(st) { var thunkify=function(value) { return function() { return value;};};st.test(&apos;returns object value&apos;, function(sst) { var expectedReturnValue=[1, 2, 3];var Constructor=functionBind.call(thunkify(expectedReturnValue), null);var result=new Constructor();sst.equal(result, expectedReturnValue);sst.end();});st.test(&apos;does not return primitive value&apos;, function(sst) { var Constructor=functionBind.call(thunkify(42), null);var result=new Constructor();sst.notEqual(result, 42);sst.end();});st.test(&apos;object from bound constructor is instance of original and bound constructor&apos;, function(sst) { var A=function(x) { this.name=x|| &apos;A&apos;;};var B=functionBind.call(A, null, &apos;B&apos;);var result=new B();sst.ok(result instanceof B, &apos;result is instance of bound constructor&apos;);sst.ok(result instanceof A, &apos;result is instance of original constructor&apos;);sst.end();});st.end();});t.end();}):&#160;index.js'],['../function-bind_2test_2index_8js.html#a3453d7f9d01b100bf676daba9f032221',1,'test(&apos;with a context&apos;, function(t) { t.test(&apos;with no bound arguments&apos;, function(st) { var args, context;var boundContext={};var namespace={ func:functionBind.call(function() { args=Array.prototype.slice.call(arguments);context=this;}, boundContext) };namespace.func(1, 2, 3);st.equal(context, boundContext, &apos;binds a context properly&apos;);st.deepEqual(args, [1, 2, 3], &apos;supplies passed arguments&apos;);st.end();});t.test(&apos;with bound arguments&apos;, function(st) { var args, context;var boundContext={};var namespace={ func:functionBind.call(function() { args=Array.prototype.slice.call(arguments);context=this;}, boundContext, 1, 2, 3) };namespace.func(4, 5, 6);st.equal(context, boundContext, &apos;binds a context properly&apos;);st.deepEqual(args, [1, 2, 3, 4, 5, 6], &apos;supplies bound and passed arguments&apos;);st.end();});t.test(&apos;returns properly&apos;, function(st) { var boundContext={};var args;var namespace={ func:functionBind.call(function() { args=Array.prototype.slice.call(arguments);return this;}, boundContext) };var context=namespace.func(1, 2, 3);st.equal(context, boundContext, &apos;returned context is bound context&apos;);st.notEqual(context, getCurrentContext.call(), &apos;returned context is not lexical context&apos;);st.deepEqual(args, [1, 2, 3], &apos;passed arguments are correct&apos;);st.end();});t.test(&apos;returns properly with bound arguments&apos;, function(st) { var boundContext={};var args;var namespace={ func:functionBind.call(function() { args=Array.prototype.slice.call(arguments);return this;}, boundContext, 1, 2, 3) };var context=namespace.func(4, 5, 6);st.equal(context, boundContext, &apos;returned context is bound context&apos;);st.notEqual(context, getCurrentContext.call(), &apos;returned context is not lexical context&apos;);st.deepEqual(args, [1, 2, 3, 4, 5, 6], &apos;passed arguments are correct&apos;);st.end();});t.test(&apos;passes the correct arguments when called as a constructor&apos;, function(st) { var expected={ name:&apos;Correct&apos; };var namespace={ Func:functionBind.call(function(arg) { return arg;}, { name:&apos;Incorrect&apos; }) };var returned=new namespace.Func(expected);st.equal(returned, expected, &apos;returns the right arg when called as a constructor&apos;);st.end();});t.test(&apos;has the new instance\ &apos;s context when called as a constructor&apos;, function(st) { var actualContext;var expectedContext={ foo:&apos;bar&apos; };var namespace={ Func:functionBind.call(function() { actualContext=this;}, expectedContext) };var result=new namespace.Func();st.equal(result instanceof namespace.Func, true);st.notEqual(actualContext, expectedContext);st.end();});t.end();}):&#160;index.js'],['../function-bind_2test_2index_8js.html#a60762f51362813bbde2efde182c8dade',1,'test(&apos;bound function length&apos;, function(t) { t.test(&apos;sets a correct length without thisArg&apos;, function(st) { var subject=functionBind.call(function(a, b, c) { return a+b+c;});st.equal(subject.length, 3);st.equal(subject(1, 2, 3), 6);st.end();});t.test(&apos;sets a correct length with thisArg&apos;, function(st) { var subject=functionBind.call(function(a, b, c) { return a+b+c;}, {});st.equal(subject.length, 3);st.equal(subject(1, 2, 3), 6);st.end();});t.test(&apos;sets a correct length without thisArg and first argument&apos;, function(st) { var subject=functionBind.call(function(a, b, c) { return a+b+c;}, undefined, 1);st.equal(subject.length, 2);st.equal(subject(2, 3), 6);st.end();});t.test(&apos;sets a correct length with thisArg and first argument&apos;, function(st) { var subject=functionBind.call(function(a, b, c) { return a+b+c;}, {}, 1);st.equal(subject.length, 2);st.equal(subject(2, 3), 6);st.end();});t.test(&apos;sets a correct length without thisArg and too many arguments&apos;, function(st) { var subject=functionBind.call(function(a, b, c) { return a+b+c;}, undefined, 1, 2, 3, 4);st.equal(subject.length, 0);st.equal(subject(), 6);st.end();});t.test(&apos;sets a correct length with thisArg and too many arguments&apos;, function(st) { var subject=functionBind.call(function(a, b, c) { return a+b+c;}, {}, 1, 2, 3, 4);st.equal(subject.length, 0);st.equal(subject(), 6);st.end();});}):&#160;index.js'],['../_get_intrinsic_8js.html#a2fadabe1a969faeb75f2f22cf85912a3',1,'test(&apos;export&apos;, function(t) { t.equal(typeof GetIntrinsic, &apos;function&apos;, &apos;it is a function&apos;);t.equal(GetIntrinsic.length, 2, &apos;function has length of 2&apos;);t.end();}):&#160;GetIntrinsic.js'],['../_get_intrinsic_8js.html#a4f05570662bb36b1d7bb816b8e9baa16',1,'test(&apos;throws&apos;, function(t) { t[&apos;throws&apos;](function() { GetIntrinsic(&apos;not an intrinsic&apos;);}, SyntaxError, &apos;nonexistent intrinsic throws a syntax error&apos;);t[&apos;throws&apos;](function() { GetIntrinsic(&apos;&apos;);}, TypeError, &apos;empty string intrinsic throws a type error&apos;);t[&apos;throws&apos;](function() { GetIntrinsic(&apos;.&apos;);}, SyntaxError, &apos;&quot;just a dot&quot; intrinsic throws a syntax error&apos;);t[&apos;throws&apos;](function() { GetIntrinsic(&apos;%String&apos;);}, SyntaxError, &apos;Leading % without trailing % throws a syntax error&apos;);t[&apos;throws&apos;](function() { GetIntrinsic(&apos;String%&apos;);}, SyntaxError, &apos;Trailing % without leading % throws a syntax error&apos;);t[&apos;throws&apos;](function() { GetIntrinsic(&quot;String[&apos;prototype]&quot;);}, SyntaxError, &apos;Dynamic property access is disallowed for intrinsics(unterminated string)&apos;);t[&apos;throws&apos;](function() { GetIntrinsic(&apos;%Proxy.prototype.undefined%&apos;);}, TypeError, &quot;Throws when middle part doesn&apos;t exist (%Proxy.prototype.undefined%)&quot;);t[&apos;throws&apos;](function() { GetIntrinsic(&apos;%Array.prototype%garbage%&apos;);}, SyntaxError, &apos;Throws with extra percent signs&apos;);t[&apos;throws&apos;](function() { GetIntrinsic(&apos;%Array.prototype%push%&apos;);}, SyntaxError, &apos;Throws with extra percent signs, even on an existing intrinsic&apos;);forEach(v.nonStrings, function(nonString) { t[&apos;throws&apos;](function() { GetIntrinsic(nonString);}, TypeError, debug(nonString)+&apos; is not a String&apos;);});forEach(v.nonBooleans, function(nonBoolean) { t[&apos;throws&apos;](function() { GetIntrinsic(&apos;%&apos;, nonBoolean);}, TypeError, debug(nonBoolean)+&apos; is not a Boolean&apos;);});forEach([&apos;toString&apos;, &apos;propertyIsEnumerable&apos;, &apos;hasOwnProperty&apos;], function(objectProtoMember) { t[&apos;throws&apos;](function() { GetIntrinsic(objectProtoMember);}, SyntaxError, debug(objectProtoMember)+&apos; is not an intrinsic&apos;);});t.end();}):&#160;GetIntrinsic.js'],['../_get_intrinsic_8js.html#ae2e89eaae86c6d1dd470cc77e19bc7de',1,'test(&apos;base intrinsics&apos;, function(t) { t.equal(GetIntrinsic(&apos;%Object%&apos;), Object, &apos;%Object% yields Object&apos;);t.equal(GetIntrinsic(&apos;Object&apos;), Object, &apos;Object yields Object&apos;);t.equal(GetIntrinsic(&apos;%Array%&apos;), Array, &apos;%Array% yields Array&apos;);t.equal(GetIntrinsic(&apos;Array&apos;), Array, &apos;Array yields Array&apos;);t.end();}):&#160;GetIntrinsic.js'],['../_get_intrinsic_8js.html#ac0bc2fb83ae1a3139c039066a54527f3',1,'test(&apos;dotted paths&apos;, function(t) { t.equal(GetIntrinsic(&apos;%Object.prototype.toString%&apos;), Object.prototype.toString, &apos;%Object.prototype.toString% yields Object.prototype.toString&apos;);t.equal(GetIntrinsic(&apos;Object.prototype.toString&apos;), Object.prototype.toString, &apos;Object.prototype.toString yields Object.prototype.toString&apos;);t.equal(GetIntrinsic(&apos;%Array.prototype.push%&apos;), Array.prototype.push, &apos;%Array.prototype.push% yields Array.prototype.push&apos;);t.equal(GetIntrinsic(&apos;Array.prototype.push&apos;), Array.prototype.push, &apos;Array.prototype.push yields Array.prototype.push&apos;);test(&apos;underscore paths are aliases for dotted paths&apos;, { skip:!Object.isFrozen||Object.isFrozen(Object.prototype) }, function(st) { var original=GetIntrinsic(&apos;%ObjProto_toString%&apos;);forEach([&apos;%Object.prototype.toString%&apos;, &apos;Object.prototype.toString&apos;, &apos;%ObjectPrototype.toString%&apos;, &apos;ObjectPrototype.toString&apos;, &apos;%ObjProto_toString%&apos;, &apos;ObjProto_toString&apos;], function(name) { DefinePropertyOrThrow(Object.prototype, &apos;toString&apos;, { &apos;[[Value]]&apos;:function toString() { return original.apply(this, arguments);} });st.equal(GetIntrinsic(name), original, name+&apos; yields original Object.prototype.toString&apos;);});DefinePropertyOrThrow(Object.prototype, &apos;toString&apos;, { &apos;[[Value]]&apos;:original });st.end();});test(&apos;dotted paths cache&apos;, { skip:!Object.isFrozen||Object.isFrozen(Object.prototype) }, function(st) { var original=GetIntrinsic(&apos;%Object.prototype.propertyIsEnumerable%&apos;);forEach([&apos;%Object.prototype.propertyIsEnumerable%&apos;, &apos;Object.prototype.propertyIsEnumerable&apos;, &apos;%ObjectPrototype.propertyIsEnumerable%&apos;, &apos;ObjectPrototype.propertyIsEnumerable&apos;], function(name) { var restore=mockProperty(Object.prototype, &apos;propertyIsEnumerable&apos;, { value:function propertyIsEnumerable() { return original.apply(this, arguments);} });st.equal(GetIntrinsic(name), original, name+&apos; yields cached Object.prototype.propertyIsEnumerable&apos;);restore();});st.end();});test(&apos;dotted path reports correct error&apos;, function(st) { st[&apos;throws&apos;](function() { GetIntrinsic(&apos;%NonExistentIntrinsic.prototype.property%&apos;);},/%NonExistentIntrinsic%/, &apos;The base intrinsic of %NonExistentIntrinsic.prototype.property% is %NonExistentIntrinsic%&apos;);st[&apos;throws&apos;](function() { GetIntrinsic(&apos;%NonExistentIntrinsicPrototype.property%&apos;);},/%NonExistentIntrinsicPrototype%/, &apos;The base intrinsic of %NonExistentIntrinsicPrototype.property% is %NonExistentIntrinsicPrototype%&apos;);st.end();});t.end();}):&#160;GetIntrinsic.js'],['../_get_intrinsic_8js.html#a0e6b0eb2c660bf33e8645ebbbbcfb6c9',1,'test(&apos;accessors&apos;, { skip:! $gOPD||typeof Map !==&apos;function&apos; }, function(t) { var actual=$gOPD(Map.prototype, &apos;size&apos;);t.ok(actual, &apos;Map.prototype.size has a descriptor&apos;);t.equal(typeof actual.get, &apos;function&apos;, &apos;Map.prototype.size has a getter function&apos;);t.equal(GetIntrinsic(&apos;%Map.prototype.size%&apos;), actual.get, &apos;%Map.prototype.size% yields the getter for it&apos;);t.equal(GetIntrinsic(&apos;Map.prototype.size&apos;), actual.get, &apos;Map.prototype.size yields the getter for it&apos;);t.end();}):&#160;GetIntrinsic.js'],['../_get_intrinsic_8js.html#aeacef5c356b852d714ffa2e10cec87f5',1,'test(&apos;generator functions&apos;, { skip:!generatorFns.length }, function(t) { var $GeneratorFunction=GetIntrinsic(&apos;%GeneratorFunction%&apos;);var $GeneratorFunctionPrototype=GetIntrinsic(&apos;%Generator%&apos;);var $GeneratorPrototype=GetIntrinsic(&apos;%GeneratorPrototype%&apos;);forEach(generatorFns, function(genFn) { var fnName=genFn.name;fnName=fnName ? &quot;&apos;&quot;+fnName+&quot;&apos;&quot; :&apos;genFn&apos;;t.ok(genFn instanceof $GeneratorFunction, fnName+&apos; instanceof %GeneratorFunction%&apos;);t.ok($isProto($GeneratorFunctionPrototype, genFn), &apos;%Generator% is prototype of &apos;+fnName);t.ok($isProto($GeneratorPrototype, genFn.prototype), &apos;%GeneratorPrototype% is prototype of &apos;+fnName+&apos;.prototype&apos;);});t.end();}):&#160;GetIntrinsic.js'],['../_get_intrinsic_8js.html#ac4f763538253bea84f230c35bdfe3199',1,'test(&apos;async functions&apos;, { skip:!asyncFns.length }, function(t) { var $AsyncFunction=GetIntrinsic(&apos;%AsyncFunction%&apos;);var $AsyncFunctionPrototype=GetIntrinsic(&apos;%AsyncFunctionPrototype%&apos;);forEach(asyncFns, function(asyncFn) { var fnName=asyncFn.name;fnName=fnName ? &quot;&apos;&quot;+fnName+&quot;&apos;&quot; :&apos;asyncFn&apos;;t.ok(asyncFn instanceof $AsyncFunction, fnName+&apos; instanceof %AsyncFunction%&apos;);t.ok($isProto($AsyncFunctionPrototype, asyncFn), &apos;%AsyncFunctionPrototype% is prototype of &apos;+fnName);});t.end();}):&#160;GetIntrinsic.js'],['../_get_intrinsic_8js.html#a66d110bb60080a054e55394901f50e08',1,'test(&apos;async generator functions&apos;, { skip:asyncGenFns.length===0 }, function(t) { var $AsyncGeneratorFunction=GetIntrinsic(&apos;%AsyncGeneratorFunction%&apos;);var $AsyncGeneratorFunctionPrototype=GetIntrinsic(&apos;%AsyncGenerator%&apos;);var $AsyncGeneratorPrototype=GetIntrinsic(&apos;%AsyncGeneratorPrototype%&apos;);forEach(asyncGenFns, function(asyncGenFn) { var fnName=asyncGenFn.name;fnName=fnName ? &quot;&apos;&quot;+fnName+&quot;&apos;&quot; :&apos;asyncGenFn&apos;;t.ok(asyncGenFn instanceof $AsyncGeneratorFunction, fnName+&apos; instanceof %AsyncGeneratorFunction%&apos;);t.ok($isProto($AsyncGeneratorFunctionPrototype, asyncGenFn), &apos;%AsyncGenerator% is prototype of &apos;+fnName);t.ok($isProto($AsyncGeneratorPrototype, asyncGenFn.prototype), &apos;%AsyncGeneratorPrototype% is prototype of &apos;+fnName+&apos;.prototype&apos;);});t.end();}):&#160;GetIntrinsic.js'],['../_get_intrinsic_8js.html#a667906c28cab04df76db519e3dd2dc14',1,'test(&apos;%ThrowTypeError%&apos;, function(t) { var $ThrowTypeError=GetIntrinsic(&apos;%ThrowTypeError%&apos;);t.equal(typeof $ThrowTypeError, &apos;function&apos;, &apos;is a function&apos;);t[&apos;throws&apos;]($ThrowTypeError, TypeError, &apos;%ThrowTypeError% throws a TypeError&apos;);t.end();}):&#160;GetIntrinsic.js'],['../_get_intrinsic_8js.html#a7e269caaabadefea385f0ddb2b98b61a',1,'test(&apos;allowMissing&apos;, { skip:asyncGenFns.length &gt; 0 }, function(t) { t[&apos;throws&apos;](function() { GetIntrinsic(&apos;%AsyncGeneratorPrototype%&apos;);}, TypeError, &apos;throws when missing&apos;);t.equal(GetIntrinsic(&apos;%AsyncGeneratorPrototype%&apos;, true), undefined, &apos;does not throw when allowMissing&apos;);t.end();}):&#160;GetIntrinsic.js'],['../gopd_2test_2index_8js.html#a3b523d74a5ca2f711d7ef1df1377253d',1,'test(&apos;gOPD&apos;, function(t) { t.test(&apos;supported&apos;, { skip:!gOPD }, function(st) { st.equal(typeof gOPD, &apos;function&apos;, &apos;is a function&apos;);var obj={ x:1 };st.ok(&apos;x&apos; in obj, &apos;property exists&apos;);var desc=gOPD(obj, &apos;x&apos;);st.deepEqual(desc, { configurable:true, enumerable:true, value:1, writable:true }, &apos;descriptor is as expected&apos;);st.end();});t.test(&apos;not supported&apos;, { skip:gOPD }, function(st) { st.notOk(gOPD, &apos;is falsy&apos;);st.end();});t.end();}):&#160;index.js'],['../has-property-descriptors_2test_2index_8js.html#a2d54d61dc0d411733ca3f5f7218472df',1,'test(&apos;hasPropertyDescriptors&apos;, function(t) { t.equal(typeof hasPropertyDescriptors, &apos;function&apos;, &apos;is a function&apos;);t.equal(typeof hasPropertyDescriptors.hasArrayLengthDefineBug, &apos;function&apos;, &apos;`hasArrayLengthDefineBug` property is a function&apos;);var yes=hasPropertyDescriptors();t.test(&apos;property descriptors&apos;, { skip:!yes }, function(st) { var o={ a:sentinel };st.deepEqual(Object.getOwnPropertyDescriptor(o, &apos;a&apos;), { configurable:true, enumerable:true, value:sentinel, writable:true }, &apos;has expected property descriptor&apos;);Object.defineProperty(o, &apos;a&apos;, { enumerable:false, writable:false });st.deepEqual(Object.getOwnPropertyDescriptor(o, &apos;a&apos;), { configurable:true, enumerable:false, value:sentinel, writable:false }, &apos;has expected property descriptor after[[Define]]&apos;);st.end();});var arrayBug=hasPropertyDescriptors.hasArrayLengthDefineBug();t.test(&apos;defining array lengths&apos;, { skip:!yes||arrayBug }, function(st) { var arr=[1,, 3];st.equal(arr.length, 3, &apos;array starts with length 3&apos;);Object.defineProperty(arr, &apos;length&apos;, { value:5 });st.equal(arr.length, 5, &apos;array ends with length 5&apos;);st.end();});t.end();}):&#160;index.js'],['../has-symbols_2test_2index_8js.html#a415b772295796304da444de4d74606d5',1,'test(&apos;interface&apos;, function(t) { t.equal(typeof hasSymbols, &apos;function&apos;, &apos;is a function&apos;);t.equal(typeof hasSymbols(), &apos;boolean&apos;, &apos;returns a boolean&apos;);t.end();}):&#160;index.js'],['../has-symbols_2test_2index_8js.html#ab3b0626f9243723b6d57aacda955064b',1,'test(&apos;Symbols are supported&apos;, { skip:!hasSymbols() }, function(t) { runSymbolTests(t);t.end();}):&#160;index.js'],['../has-symbols_2test_2index_8js.html#a0bc6f23b97afad9dea5fa2a57c6ff725',1,'test(&apos;Symbols are not supported&apos;, { skip:hasSymbols() }, function(t) { t.equal(typeof Symbol, &apos;undefined&apos;, &apos;global Symbol is undefined&apos;);t.equal(typeof Object.getOwnPropertySymbols, &apos;undefined&apos;, &apos;Object.getOwnPropertySymbols does not exist&apos;);t.end();}):&#160;index.js'],['../core-js_8js.html#ab2c0419770b00ea73b9976a34bcb6f13',1,'test(&apos;polyfilled Symbols&apos;, function(t) { t.equal(hasSymbols(), false, &apos;hasSymbols is false before polyfilling&apos;);require(&apos;core-js/fn/symbol&apos;);require(&apos;core-js/fn/symbol/to-string-tag&apos;);require(&apos;../tests&apos;)(t);var hasSymbolsAfter=hasSymbols();t.equal(hasSymbolsAfter, true, &apos;hasSymbols is true after polyfilling&apos;);t.end();}):&#160;core-js.js'],['../get-own-property-symbols_8js.html#a271d1d90c90b18a5f525a5f98201f431',1,'test(&apos;polyfilled Symbols&apos;, function(t) { t.equal(hasSymbols(), false, &apos;hasSymbols is false before polyfilling&apos;);require(&apos;get-own-property-symbols&apos;);require(&apos;../tests&apos;)(t);var hasSymbolsAfter=hasSymbols();t.equal(hasSymbolsAfter, true, &apos;hasSymbols is true after polyfilling&apos;);t.end();}):&#160;get-own-property-symbols.js'],['../test-core-js_8js.html#a098dcc676b150eabcae13af2dbe9ea7d',1,'test(&apos;Maps&apos;, function(t) { t.equal(inspect(new Map([[1, 2]])), &apos;Map(1) {1=&gt; 2}&apos;);t.end();}):&#160;test-core-js.js'],['../test-core-js_8js.html#a5bc24fc3af81f7de118beb9be26b36fb',1,'test(&apos;WeakMaps&apos;, function(t) { t.equal(inspect(new WeakMap([[{}, 2]])), &apos;WeakMap { ? }&apos;);t.end();}):&#160;test-core-js.js'],['../test-core-js_8js.html#adb12e6f249094e81b49b9b5a9d99b957',1,'test(&apos;Sets&apos;, function(t) { t.equal(inspect(new Set([[1, 2]])), &apos;Set(1) {[1, 2]}&apos;);t.end();}):&#160;test-core-js.js'],['../test-core-js_8js.html#a83217b0aef90c4d920a488d8b3a1355a',1,'test(&apos;WeakSets&apos;, function(t) { t.equal(inspect(new WeakSet([[1, 2]])), &apos;WeakSet { ? }&apos;);t.end();}):&#160;test-core-js.js'],['../bigint_8js.html#aed27f1b231adc2e96c93c8f3488846bb',1,'test(&apos;bigint&apos;, { skip:typeof BigInt===&apos;undefined&apos; }, function(t) { t.test(&apos;primitives&apos;, function(st) { st.plan(3);st.equal(inspect(BigInt(-256)), &apos;-256n&apos;);st.equal(inspect(BigInt(0)), &apos;0n&apos;);st.equal(inspect(BigInt(256)), &apos;256n&apos;);});t.test(&apos;objects&apos;, function(st) { st.plan(3);st.equal(inspect(Object(BigInt(-256))), &apos;Object(-256n)&apos;);st.equal(inspect(Object(BigInt(0))), &apos;Object(0n)&apos;);st.equal(inspect(Object(BigInt(256))), &apos;Object(256n)&apos;);});t.test(&apos;syntactic primitives&apos;, function(st) { st.plan(3);st.equal(inspect(Function(&apos;return -256n&apos;)()), &apos;-256n&apos;);st.equal(inspect(Function(&apos;return 0n&apos;)()), &apos;0n&apos;);st.equal(inspect(Function(&apos;return 256n&apos;)()), &apos;256n&apos;);});t.test(&apos;toStringTag&apos;, { skip:!hasToStringTag }, function(st) { st.plan(1);var faker={};faker[Symbol.toStringTag]=&apos;BigInt&apos;;st.equal(inspect(faker), &apos;{[Symbol(Symbol.toStringTag)]:\ &apos;BigInt\&apos; }&apos;, &apos;object lying about being a BigInt inspects as an object&apos;);});t.test(&apos;numericSeparator&apos;, function(st) { st.equal(inspect(BigInt(0), { numericSeparator:false }), &apos;0n&apos;, &apos;0n, numericSeparator false&apos;);st.equal(inspect(BigInt(0), { numericSeparator:true }), &apos;0n&apos;, &apos;0n, numericSeparator true&apos;);st.equal(inspect(BigInt(1234), { numericSeparator:false }), &apos;1234n&apos;, &apos;1234n, numericSeparator false&apos;);st.equal(inspect(BigInt(1234), { numericSeparator:true }), &apos;1_234n&apos;, &apos;1234n, numericSeparator true&apos;);st.equal(inspect(BigInt(-1234), { numericSeparator:false }), &apos;-1234n&apos;, &apos;1234n, numericSeparator false&apos;);st.equal(inspect(BigInt(-1234), { numericSeparator:true }), &apos;-1_234n&apos;, &apos;1234n, numericSeparator true&apos;);st.end();});t.end();}):&#160;bigint.js'],['../dom_8js.html#a55f28173fc6abb193ce12242f1811e61',1,'test(&apos;dom element&apos;, function(t) { t.plan(1);var d=document.createElement(&apos;div&apos;);d.setAttribute(&apos;id&apos;, &apos;beep&apos;);d.innerHTML=&apos;&lt; b &gt;wooo&lt;/b &gt;&lt; i &gt;iiiii&lt;/i &gt;&apos;;t.equal(inspect([d, { a:3, b:4, c:[5, 6, [7, [8, [9]]]] }]), &apos;[&lt; div id=&quot;beep&quot;&gt;...&lt;/div &gt;, { a:3, b:4, c:[5, 6, [7, [8, [Object]]]] }]&apos;);}):&#160;dom.js'],['../test_2circular_8js.html#a6335ecbf22e5008748ec2868104c553a',1,'test(&apos;circular&apos;, function(t) { t.plan(2);var obj={ a:1, b:[3, 4] };obj.c=obj;t.equal(inspect(obj), &apos;{ a:1, b:[3, 4], c:[Circular] }&apos;);var double={};double.a=[double];double.b={};double.b.inner=double.b;double.b.obj=double;t.equal(inspect(double), &apos;{ a:[[Circular]], b:{ inner:[Circular], obj:[Circular] } }&apos;);}):&#160;circular.js'],['../element_8js.html#a536428566d0bdaaccb4cdc4a815a2572',1,'test(&apos;element&apos;, function(t) { t.plan(3);var elem={ nodeName:&apos;div&apos;, attributes:[{ name:&apos;class&apos;, value:&apos;row&apos; }], getAttribute:function(key) { return key;}, childNodes:[] };var obj=[1, elem, 3];t.deepEqual(inspect(obj), &apos;[1,&lt; div class=&quot;row&quot;&gt;&lt;/div &gt;, 3]&apos;);t.deepEqual(inspect(obj, { quoteStyle:&apos;single&apos; }), &quot;[ 1, &lt;div class=&apos;row&apos;&gt;&lt;/div&gt;, 3 ]&quot;);t.deepEqual(inspect(obj, { quoteStyle:&apos;double&apos; }), &apos;[1,&lt; div class=&quot;row&quot;&gt;&lt;/div &gt;, 3]&apos;);}):&#160;element.js'],['../element_8js.html#a7d83e628f7a7ce8b428854cbf980721f',1,'test(&apos;element no attr&apos;, function(t) { t.plan(1);var elem={ nodeName:&apos;div&apos;, getAttribute:function(key) { return key;}, childNodes:[] };var obj=[1, elem, 3];t.deepEqual(inspect(obj), &apos;[1,&lt; div &gt;&lt;/div &gt;, 3]&apos;);}):&#160;element.js'],['../element_8js.html#a452df4c193e7762dba7e552ae871943a',1,'test(&apos;element with contents&apos;, function(t) { t.plan(1);var elem={ nodeName:&apos;div&apos;, getAttribute:function(key) { return key;}, childNodes:[{ nodeName:&apos;b&apos; }] };var obj=[1, elem, 3];t.deepEqual(inspect(obj), &apos;[1,&lt; div &gt;...&lt;/div &gt;, 3]&apos;);}):&#160;element.js'],['../element_8js.html#a010c0af94c5afe3c07cdb4b0a0f8854e',1,'test(&apos;element instance&apos;, function(t) { t.plan(1);var h=global.HTMLElement;global.HTMLElement=function(name, attr) { this.nodeName=name;this.attributes=attr;};global.HTMLElement.prototype.getAttribute=function() {};var elem=new global.HTMLElement(&apos;div&apos;, []);var obj=[1, elem, 3];t.deepEqual(inspect(obj), &apos;[1,&lt; div &gt;&lt;/div &gt;, 3]&apos;);global.HTMLElement=h;}):&#160;element.js'],['../err_8js.html#ae879a756c238748066ca6d8bdbeb0a42',1,'test(&apos;type error&apos;, function(t) { t.plan(1);var aerr=new TypeError();aerr.foo=555;aerr.bar=[1, 2, 3];var berr=new TypeError(&apos;tuv&apos;);berr.baz=555;var cerr=new SyntaxError();cerr.message=&apos;whoa&apos;;cerr[&apos;a-b&apos;]=5;var withCause=new ErrorWithCause(&apos;foo&apos;, { cause:&apos;bar&apos; });var withCausePlus=new ErrorWithCause(&apos;foo&apos;, { cause:&apos;bar&apos; });withCausePlus.foo=&apos;bar&apos;;var withUndefinedCause=new ErrorWithCause(&apos;foo&apos;, { cause:undefined });var withEnumerableCause=new Error(&apos;foo&apos;);withEnumerableCause.cause=&apos;bar&apos;;var obj=[new TypeError(), new TypeError(&apos;xxx&apos;), aerr, berr, cerr, withCause, withCausePlus, withUndefinedCause, withEnumerableCause];t.equal(inspect(obj), &apos;[&apos;+[&apos;[TypeError]&apos;, &apos;[TypeError:xxx]&apos;, &apos;{[TypeError] foo:555, bar:[1, 2, 3] }&apos;, &apos;{[TypeError:tuv] baz:555 }&apos;, &apos;{[SyntaxError:whoa] message:\ &apos;whoa\&apos;, \ &apos;a-b\&apos;:5 }&apos;, &apos;cause&apos; in Error.prototype ? &apos;[Error:foo]&apos; :&apos;{[Error:foo][cause]:\ &apos;bar\&apos; }&apos;, &apos;{[Error:foo] &apos;+(&apos;cause&apos; in Error.prototype ? &apos;&apos; :&apos;[cause]:\ &apos;bar\&apos;, &apos;)+ &apos;foo:\ &apos;bar\&apos; }&apos;, &apos;cause&apos; in Error.prototype ? &apos;[Error:foo]&apos; :&apos;{[Error:foo][cause]:undefined }&apos;, &apos;{[Error:foo] cause:\ &apos;bar\&apos; }&apos;].join(&apos;, &apos;)+&apos;]&apos;):&#160;err.js'],['../fakes_8js.html#a8c7c2e6543c9d61dcfa908235db0e6a3',1,'test(&apos;fakes&apos;, { skip:!hasToStringTag }, function(t) { forEach([&apos;Array&apos;, &apos;Boolean&apos;, &apos;Date&apos;, &apos;Error&apos;, &apos;Number&apos;, &apos;RegExp&apos;, &apos;String&apos;], function(expected) { var faker={};faker[Symbol.toStringTag]=expected;t.equal(inspect(faker), &apos;{[Symbol(Symbol.toStringTag)]:\&apos;&apos;+expected+&apos;\&apos; }&apos;, &apos;faker masquerading as &apos;+expected+&apos; is not shown as one&apos;);});t.end();}):&#160;fakes.js'],['../test_2fn_8js.html#afc42501c0c129d8e9dc698ac82c63ee3',1,'test(&apos;function&apos;, function(t) { t.plan(1);var obj=[1, 2, function f(n) { return n;}, 4];t.equal(inspect(obj), &apos;[1, 2, [Function:f], 4]&apos;);}):&#160;fn.js'],['../test_2fn_8js.html#ae568970bb15634efaa749b335207871f',1,'test(&apos;function name&apos;, function(t) { t.plan(1);var f=(function() { return function() {};}());f.toString=function toStr() { return &apos;function xxx() {}&apos;;};var obj=[1, 2, f, 4];t.equal(inspect(obj), &apos;[1, 2, [Function(anonymous)] { toString:[Function:toStr] }, 4]&apos;);}):&#160;fn.js'],['../test_2fn_8js.html#a8486a79bf260e7b5ac2715cb73296154',1,'test(&apos;anon function&apos;, function(t) { var f=(function() { return function() {};}());var obj=[1, 2, f, 4];t.equal(inspect(obj), &apos;[1, 2, [Function(anonymous)], 4]&apos;);t.end();}):&#160;fn.js'],['../test_2fn_8js.html#a7bfad5f7743831858ae90298f5875713',1,'test(&apos;arrow function&apos;, { skip:!arrow }, function(t) { t.equal(inspect(arrow), &apos;[Function(anonymous)]&apos;);t.end();}):&#160;fn.js'],['../test_2fn_8js.html#a42a21e7ce09b23653846842e4865f33e',1,'test(&apos;truly nameless function&apos;, { skip:!arrow||!functionsHaveConfigurableNames }, function(t) { function f() {} Object.defineProperty(f, &apos;name&apos;, { value:false });t.equal(f.name, false);t.equal(inspect(f), &apos;[Function:f]&apos;, &apos;named function with falsy `.name` does not hide its original name&apos;);function g() {} Object.defineProperty(g, &apos;name&apos;, { value:true });t.equal(g.name, true);t.equal(inspect(g), &apos;[Function:true]&apos;, &apos;named function with truthy `.name` hides its original name&apos;);var anon=function() {};Object.defineProperty(anon, &apos;name&apos;, { value:null });t.equal(anon.name, null);t.equal(inspect(anon), &apos;[Function(anonymous)]&apos;, &apos;anon function with falsy `.name` does not hide its anonymity&apos;);var anon2=function() {};Object.defineProperty(anon2, &apos;name&apos;, { value:1 });t.equal(anon2.name, 1);t.equal(inspect(anon2), &apos;[Function:1]&apos;, &apos;anon function with truthy `.name` hides its anonymity&apos;);t.end();}):&#160;fn.js'],['../global_8js.html#a893644edc87ece6d564422fd06581f08',1,'test(&apos;global object&apos;, function(t) { var expected=typeof window===&apos;undefined&apos; ? &apos;globalThis&apos; :&apos;Window&apos;;t.equal(inspect([globalThis]), &apos;[{[object &apos;+expected+&apos;] }]&apos;);t.end();}):&#160;global.js'],['../has_8js.html#a4d1f3d54e29b1c36650ae444ec030115',1,'test(&apos;when Object#hasOwnProperty is deleted&apos;, function(t) { t.plan(1);var arr=[1,, 3];t.teardown(mockProperty(Array.prototype, 1, { value:2 }));t.teardown(mockProperty(Object.prototype, &apos;hasOwnProperty&apos;, { &apos;delete&apos;:true }));t.equal(inspect(arr), &apos;[1,, 3]&apos;);}):&#160;has.js'],['../holes_8js.html#adcd1d629798ea4466d4ade9ae2161960',1,'test(&apos;holes&apos;, function(t) { t.plan(1);t.equal(inspect(xs), &quot;[ &apos;a&apos;, &apos;b&apos;, , , , &apos;f&apos;, , &apos;j&apos;, &apos;k&apos; ]&quot;);}):&#160;holes.js'],['../indent-option_8js.html#a0ce51cd20753a9dcf3c6b9d6c3e28870',1,'test(&apos;bad indent options&apos;, function(t) { forEach([undefined, true, false, -1, 1.2, Infinity, -Infinity, NaN], function(indent) { t[&apos;throws&apos;](function() { inspect(&apos;&apos;, { indent:indent });}, TypeError, inspect(indent)+&apos; is invalid&apos;);});t.end();}):&#160;indent-option.js'],['../indent-option_8js.html#a58098e2ef6e5e1afe810198f5197c135',1,'test(&apos;simple object with indent&apos;, function(t) { t.plan(2);var obj={ a:1, b:2 };var expectedSpaces=[&apos;{&apos;, &apos; a:1,&apos;, &apos; b:2&apos;, &apos;}&apos;].join(&apos;\n&apos;);var expectedTabs=[&apos;{&apos;, &apos; a:1,&apos;, &apos; b:2&apos;, &apos;}&apos;].join(&apos;\n&apos;);t.equal(inspect(obj, { indent:2 }), expectedSpaces, &apos;two&apos;);t.equal(inspect(obj, { indent:&apos;\t&apos; }), expectedTabs, &apos;tabs&apos;);}):&#160;indent-option.js'],['../indent-option_8js.html#a5cdc2972f2aa64598f445146fbafbd03',1,'test(&apos;two deep object with indent&apos;, function(t) { t.plan(2);var obj={ a:1, b:{ c:3, d:4 } };var expectedSpaces=[&apos;{&apos;, &apos; a:1,&apos;, &apos; b:{&apos;, &apos; c:3,&apos;, &apos; d:4&apos;, &apos; }&apos;, &apos;}&apos;].join(&apos;\n&apos;);var expectedTabs=[&apos;{&apos;, &apos; a:1,&apos;, &apos; b:{&apos;, &apos; c:3,&apos;, &apos; d:4&apos;, &apos; }&apos;, &apos;}&apos;].join(&apos;\n&apos;);t.equal(inspect(obj, { indent:2 }), expectedSpaces, &apos;two&apos;);t.equal(inspect(obj, { indent:&apos;\t&apos; }), expectedTabs, &apos;tabs&apos;);}):&#160;indent-option.js'],['../indent-option_8js.html#ac23ae93b2fb13a66744580e3579cafde',1,'test(&apos;simple array with all single line elements&apos;, function(t) { t.plan(2);var obj=[1, 2, 3, &apos;asdf\nsdf&apos;];var expected=&apos;[1, 2, 3, \ &apos;asdf\\nsdf\&apos;]&apos;;t.equal(inspect(obj, { indent:2 }), expected, &apos;two&apos;);t.equal(inspect(obj, { indent:&apos;\t&apos; }), expected, &apos;tabs&apos;);}):&#160;indent-option.js'],['../indent-option_8js.html#aeea0f8d07f78c32675ce5df3a51702fc',1,'test(&apos;array with complex elements&apos;, function(t) { t.plan(2);var obj=[1, { a:1, b:{ c:1 } }, &apos;asdf\nsdf&apos;];var expectedSpaces=[&apos;[&apos;, &apos; 1,&apos;, &apos; {&apos;, &apos; a:1,&apos;, &apos; b:{&apos;, &apos; c:1&apos;, &apos; }&apos;, &apos; },&apos;, &apos; \ &apos;asdf\\nsdf\&apos;&apos;, &apos;]&apos;].join(&apos;\n&apos;);var expectedTabs=[&apos;[&apos;, &apos; 1,&apos;, &apos; {&apos;, &apos; a:1,&apos;, &apos; b:{&apos;, &apos; c:1&apos;, &apos; }&apos;, &apos; },&apos;, &apos; \ &apos;asdf\\nsdf\&apos;&apos;, &apos;]&apos;].join(&apos;\n&apos;);t.equal(inspect(obj, { indent:2 }), expectedSpaces, &apos;two&apos;);t.equal(inspect(obj, { indent:&apos;\t&apos; }), expectedTabs, &apos;tabs&apos;);}):&#160;indent-option.js'],['../indent-option_8js.html#a0ccaa995e25b81217041d079e3e55cf9',1,'test(&apos;values&apos;, function(t) { t.plan(2);var obj=[{}, [], { &apos;a-b&apos;:5 }];var expectedSpaces=[&apos;[&apos;, &apos; {},&apos;, &apos;[],&apos;, &apos; {&apos;, &apos; \ &apos;a-b\&apos;:5&apos;, &apos; }&apos;, &apos;]&apos;].join(&apos;\n&apos;);var expectedTabs=[&apos;[&apos;, &apos; {},&apos;, &apos;[],&apos;, &apos; {&apos;, &apos; \ &apos;a-b\&apos;:5&apos;, &apos; }&apos;, &apos;]&apos;].join(&apos;\n&apos;);t.equal(inspect(obj, { indent:2 }), expectedSpaces, &apos;two&apos;);t.equal(inspect(obj, { indent:&apos;\t&apos; }), expectedTabs, &apos;tabs&apos;);}):&#160;indent-option.js'],['../indent-option_8js.html#a025d5b75b8194ade95d3368dc8b209fb',1,'test(&apos;Map&apos;, { skip:typeof Map !==&apos;function&apos; }, function(t) { var map=new Map();map.set({ a:1 }, [&apos;b&apos;]);map.set(3, NaN);var expectedStringSpaces=[ &apos;Map(2) {&apos;, &apos; { a:1 }=&gt;[\ &apos;b\&apos;],&apos;, &apos; 3=&gt; NaN&apos;, &apos;}&apos;].join(&apos;\n&apos;);var expectedStringTabs=[ &apos;Map(2) {&apos;, &apos; { a:1 }=&gt;[\ &apos;b\&apos;],&apos;, &apos; 3=&gt; NaN&apos;, &apos;}&apos;].join(&apos;\n&apos;);var expectedStringTabsDoubleQuotes=[ &apos;Map(2) {&apos;, &apos; { a:1 }=&gt;[&quot;b&quot;],&apos;, &apos; 3=&gt; NaN&apos;, &apos;}&apos;].join(&apos;\n&apos;);t.equal(inspect(map, { indent:2 }), expectedStringSpaces, &apos;Map keys are not indented(two)&apos;);t.equal(inspect(map, { indent:&apos;\t&apos; }), expectedStringTabs, &apos;Map keys are not indented(tabs)&apos;);t.equal(inspect(map, { indent:&apos;\t&apos;, quoteStyle:&apos;double&apos; }), expectedStringTabsDoubleQuotes, &apos;Map keys are not indented(tabs+double quotes)&apos;);t.equal(inspect(new Map(), { indent:2 }), &apos;Map(0) {}&apos;, &apos;empty Map should show as empty(two)&apos;);t.equal(inspect(new Map(), { indent:&apos;\t&apos; }), &apos;Map(0) {}&apos;, &apos;empty Map should show as empty(tabs)&apos;);var nestedMap=new Map();nestedMap.set(nestedMap, map);var expectedNestedSpaces=[ &apos;Map(1) {&apos;, &apos;[Circular]=&gt; Map(2) {&apos;, &apos; { a:1 }=&gt;[\ &apos;b\&apos;],&apos;, &apos; 3=&gt; NaN&apos;, &apos; }&apos;, &apos;}&apos;].join(&apos;\n&apos;);var expectedNestedTabs=[ &apos;Map(1) {&apos;, &apos;[Circular]=&gt; Map(2) {&apos;, &apos; { a:1 }=&gt;[\ &apos;b\&apos;],&apos;, &apos; 3=&gt; NaN&apos;, &apos; }&apos;, &apos;}&apos;].join(&apos;\n&apos;);t.equal(inspect(nestedMap, { indent:2 }), expectedNestedSpaces, &apos;Map containing a Map should work(two)&apos;);t.equal(inspect(nestedMap, { indent:&apos;\t&apos; }), expectedNestedTabs, &apos;Map containing a Map should work(tabs)&apos;);t.end();}):&#160;indent-option.js'],['../indent-option_8js.html#a705469cc11ae69f20c3fc7b2ea584f2c',1,'test(&apos;Set&apos;, { skip:typeof Set !==&apos;function&apos; }, function(t) { var set=new Set();set.add({ a:1 });set.add([&apos;b&apos;]);var expectedStringSpaces=[ &apos;Set(2) {&apos;, &apos; {&apos;, &apos; a:1&apos;, &apos; },&apos;, &apos;[\ &apos;b\&apos;]&apos;, &apos;}&apos;].join(&apos;\n&apos;);var expectedStringTabs=[ &apos;Set(2) {&apos;, &apos; {&apos;, &apos; a:1&apos;, &apos; },&apos;, &apos;[\ &apos;b\&apos;]&apos;, &apos;}&apos;].join(&apos;\n&apos;);t.equal(inspect(set, { indent:2 }), expectedStringSpaces, &apos;new Set([{ a:1 }, [&quot;b&quot;]]) should show size and contents(two)&apos;);t.equal(inspect(set, { indent:&apos;\t&apos; }), expectedStringTabs, &apos;new Set([{ a:1 }, [&quot;b&quot;]]) should show size and contents(tabs)&apos;);t.equal(inspect(new Set(), { indent:2 }), &apos;Set(0) {}&apos;, &apos;empty Set should show as empty(two)&apos;);t.equal(inspect(new Set(), { indent:&apos;\t&apos; }), &apos;Set(0) {}&apos;, &apos;empty Set should show as empty(tabs)&apos;);var nestedSet=new Set();nestedSet.add(set);nestedSet.add(nestedSet);var expectedNestedSpaces=[ &apos;Set(2) {&apos;, &apos; Set(2) {&apos;, &apos; {&apos;, &apos; a:1&apos;, &apos; },&apos;, &apos;[\ &apos;b\&apos;]&apos;, &apos; },&apos;, &apos;[Circular]&apos;, &apos;}&apos;].join(&apos;\n&apos;);var expectedNestedTabs=[ &apos;Set(2) {&apos;, &apos; Set(2) {&apos;, &apos; {&apos;, &apos; a:1&apos;, &apos; },&apos;, &apos;[\ &apos;b\&apos;]&apos;, &apos; },&apos;, &apos;[Circular]&apos;, &apos;}&apos;].join(&apos;\n&apos;);t.equal(inspect(nestedSet, { indent:2 }), expectedNestedSpaces, &apos;Set containing a Set should work(two)&apos;);t.equal(inspect(nestedSet, { indent:&apos;\t&apos; }), expectedNestedTabs, &apos;Set containing a Set should work(tabs)&apos;);t.end();}):&#160;indent-option.js'],['../test_2inspect_8js.html#a3eae88ae1fef1956f6d38949e973e83e',1,'test(&apos;inspect&apos;, function(t) { t.plan(5);var obj=[{ inspect:function xyzInspect() { return &apos;!XYZ¡&apos;;} }, []];var stringResult=&apos;[!XYZ¡, []]&apos;;var falseResult=&apos;[{ inspect:[Function:xyzInspect] }, []]&apos;;t.equal(inspect(obj), stringResult);t.equal(inspect(obj, { customInspect:true }), stringResult);t.equal(inspect(obj, { customInspect:&apos;symbol&apos; }), falseResult);t.equal(inspect(obj, { customInspect:false }), falseResult);t[&apos;throws&apos;](function() { inspect(obj, { customInspect:&apos;not a boolean or &quot;symbol&quot;&apos; });}, TypeError, &apos;`customInspect` must be a boolean or the string &quot;symbol&quot;&apos;);}):&#160;inspect.js'],['../lowbyte_8js.html#a952bfec9eeaf6ddf1fa145fdbb0645b2',1,'test(&apos;interpolate low bytes&apos;, function(t) { t.plan(1);t.equal(inspect(obj), &quot;{ x: &apos;a\\r\\nb&apos;, y: &apos;\\x05! \\x1F \\x12&apos; }&quot;);}):&#160;lowbyte.js'],['../number_8js.html#a7db6b52add32ac486c46eb0a9a2b71d6',1,'test(&apos;negative zero&apos;, function(t) { t.equal(inspect(0), &apos;0&apos;, &apos;inspect(0)===&quot;0&quot;&apos;);t.equal(inspect(Object(0)), &apos;Object(0)&apos;, &apos;inspect(Object(0))===&quot;Object(0)&quot;&apos;);t.equal(inspect(-0), &apos;-0&apos;, &apos;inspect(-0)===&quot;-0&quot;&apos;);t.equal(inspect(Object(-0)), &apos;Object(-0)&apos;, &apos;inspect(Object(-0))===&quot;Object(-0)&quot;&apos;);t.end();}):&#160;number.js'],['../number_8js.html#afd243a3b6616e1f45c94476bf5ad8267',1,'test(&apos;numericSeparator&apos;, function(t) { forEach(v.nonBooleans, function(nonBoolean) { t[&apos;throws&apos;](function() { inspect(true, { numericSeparator:nonBoolean });}, TypeError, inspect(nonBoolean)+&apos; is not a boolean&apos;);});t.test(&apos;3 digit numbers&apos;, function(st) { var failed=false;for(var i=-999;i&lt; 1000;i+=1) { var actual=inspect(i);var actualSepNo=inspect(i, { numericSeparator:false });var actualSepYes=inspect(i, { numericSeparator:true });var expected=String(i);if(actual !==expected||actualSepNo !==expected||actualSepYes !==expected) { failed=true;t.equal(actual, expected);t.equal(actualSepNo, expected);t.equal(actualSepYes, expected);} } st.notOk(failed, &apos;all 3 digit numbers passed&apos;);st.end();});t.equal(inspect(1e3), &apos;1000&apos;, &apos;1000&apos;);t.equal(inspect(1e3, { numericSeparator:false }), &apos;1000&apos;, &apos;1000, numericSeparator false&apos;);t.equal(inspect(1e3, { numericSeparator:true }), &apos;1_000&apos;, &apos;1000, numericSeparator true&apos;);t.equal(inspect(-1e3), &apos;-1000&apos;, &apos;-1000&apos;);t.equal(inspect(-1e3, { numericSeparator:false }), &apos;-1000&apos;, &apos;-1000, numericSeparator false&apos;);t.equal(inspect(-1e3, { numericSeparator:true }), &apos;-1_000&apos;, &apos;-1000, numericSeparator true&apos;);t.equal(inspect(1234.5678, { numericSeparator:true }), &apos;1_234.567_8&apos;, &apos;fractional numbers get separators&apos;);t.equal(inspect(1234.56789, { numericSeparator:true }), &apos;1_234.567_89&apos;, &apos;fractional numbers get separators&apos;);t.equal(inspect(1234.567891, { numericSeparator:true }), &apos;1_234.567_891&apos;, &apos;fractional numbers get separators&apos;);t.end();}):&#160;number.js'],['../quote_style_8js.html#a99e67fa3aad2b615958de19e40d04381',1,'test(&apos;quoteStyle option&apos;, function(t) { t[&apos;throws&apos;](function() { inspect(null, { quoteStyle:false });}, &apos;false is not a valid value&apos;);t[&apos;throws&apos;](function() { inspect(null, { quoteStyle:true });}, &apos;true is not a valid value&apos;);t[&apos;throws&apos;](function() { inspect(null, { quoteStyle:&apos;&apos; });}, &apos;&quot;&quot; is not a valid value&apos;);t[&apos;throws&apos;](function() { inspect(null, { quoteStyle:{} });}, &apos;{} is not a valid value&apos;);t[&apos;throws&apos;](function() { inspect(null, { quoteStyle:[] });}, &apos;[] is not a valid value&apos;);t[&apos;throws&apos;](function() { inspect(null, { quoteStyle:42 });}, &apos;42 is not a valid value&apos;);t[&apos;throws&apos;](function() { inspect(null, { quoteStyle:NaN });}, &apos;NaN is not a valid value&apos;);t[&apos;throws&apos;](function() { inspect(null, { quoteStyle:function() {} });}, &apos;a function is not a valid value&apos;);t.end();}):&#160;quoteStyle.js'],['../to_string_tag_8js.html#a0d26fc277f94fb641ea47354ceb332bf',1,'test(&apos;Symbol.toStringTag&apos;, { skip:!hasToStringTag }, function(t) { t.plan(4);var obj={ a:1 };t.equal(inspect(obj), &apos;{ a:1 }&apos;, &apos;object, no Symbol.toStringTag&apos;);obj[Symbol.toStringTag]=&apos;foo&apos;;t.equal(inspect(obj), &apos;{ a:1, [Symbol(Symbol.toStringTag)]:\ &apos;foo\&apos; }&apos;, &apos;object with Symbol.toStringTag&apos;);t.test(&apos;null objects&apos;, { skip:&apos;toString&apos; in { __proto__:null } }, function(st) { st.plan(2);var dict={ __proto__:null, a:1 };st.equal(inspect(dict), &apos;[Object:null prototype] { a:1 }&apos;, &apos;null object with Symbol.toStringTag&apos;);dict[Symbol.toStringTag]=&apos;Dict&apos;;st.equal(inspect(dict), &apos;[Dict:null prototype] { a:1, [Symbol(Symbol.toStringTag)]:\ &apos;Dict\&apos; }&apos;, &apos;null object with Symbol.toStringTag&apos;);});t.test(&apos;instances&apos;, function(st) { st.plan(4);function C() { this.a=1;} st.equal(Object.prototype.toString.call(new C()), &apos;[object Object]&apos;, &apos;instance, no toStringTag, Object.prototype.toString&apos;);st.equal(inspect(new C()), &apos;C { a:1 }&apos;, &apos;instance, no toStringTag&apos;);C.prototype[Symbol.toStringTag]=&apos;Class!&apos;;st.equal(Object.prototype.toString.call(new C()), &apos;[object Class!]&apos;, &apos;instance, with toStringTag, Object.prototype.toString&apos;);st.equal(inspect(new C()), &apos;C[Class!] { a:1 }&apos;, &apos;instance, with toStringTag&apos;);});}):&#160;toStringTag.js'],['../undef_8js.html#a9d1426e7d32330751ba573ff9a503376',1,'test(&apos;undef and null&apos;, function(t) { t.plan(1);t.equal(inspect(obj), &apos;{ a:1, b:[3, 4, undefined, null], c:undefined, d:null }&apos;);}):&#160;undef.js'],['../values_8js.html#acf8dfcc516ac44f46e89c199b2be4e4c',1,'test(&apos;values&apos;, function(t) { t.plan(1);var obj=[{}, [], { &apos;a-b&apos;:5 }];t.equal(inspect(obj), &apos;[{}, [], { \ &apos;a-b\&apos;:5 }]&apos;);}):&#160;values.js'],['../values_8js.html#afd084dccfc5feea5371b8dbdfc6d0472',1,'test(&apos;arrays with properties&apos;, function(t) { t.plan(1);var arr=[3];arr.foo=&apos;bar&apos;;var obj=[1, 2, arr];obj.baz=&apos;quux&apos;;obj.index=-1;t.equal(inspect(obj), &apos;[1, 2, [3, foo:\ &apos;bar\&apos;], baz:\ &apos;quux\&apos;, index:-1]&apos;);}):&#160;values.js'],['../values_8js.html#a33b3e23d3300796bb10c25aad68df255',1,'test(&apos;has&apos;, function(t) { t.plan(1);t.teardown(mockProperty(Object.prototype, &apos;hasOwnProperty&apos;, { &apos;delete&apos;:true }));t.equal(inspect({ a:1, b:2 }), &apos;{ a:1, b:2 }&apos;);}):&#160;values.js'],['../values_8js.html#a9dadb801a7ac6754af2a9b91f3db012d',1,'test(&apos;indexOf seen&apos;, function(t) { t.plan(1);var xs=[1, 2, 3, {}];xs.push(xs);var seen=[];seen.indexOf=undefined;t.equal(inspect(xs, {}, 0, seen), &apos;[1, 2, 3, {}, [Circular]]&apos;);}):&#160;values.js'],['../values_8js.html#a64264c4a04a3bd620e25d87d2a819bdc',1,'test(&apos;seen seen&apos;, function(t) { t.plan(1);var xs=[1, 2, 3];var seen=[xs];seen.indexOf=undefined;t.equal(inspect(xs, {}, 0, seen), &apos;[Circular]&apos;);}):&#160;values.js'],['../values_8js.html#ad7e339aefea693b5f7adb4a6618900bb',1,'test(&apos;seen seen seen&apos;, function(t) { t.plan(1);var xs=[1, 2, 3];var seen=[5, xs];seen.indexOf=undefined;t.equal(inspect(xs, {}, 0, seen), &apos;[Circular]&apos;);}):&#160;values.js'],['../values_8js.html#af2780784a544a5576bfd5d5b53482ec2',1,'test(&apos;symbols&apos;, { skip:!hasSymbols }, function(t) { var sym=Symbol(&apos;foo&apos;);t.equal(inspect(sym), &apos;Symbol(foo)&apos;, &apos;Symbol(&quot;foo&quot;) should be &quot;Symbol(foo)&quot;&apos;);if(typeof sym===&apos;symbol&apos;) { t.equal(inspect(Object(sym)), &apos;Object(Symbol(foo))&apos;, &apos;Object(Symbol(&quot;foo&quot;)) should be &quot;Object(Symbol(foo))&quot;&apos;);} t.test(&apos;toStringTag&apos;, { skip:!hasToStringTag }, function(st) { st.plan(1);var faker={};faker[Symbol.toStringTag]=&apos;Symbol&apos;;st.equal(inspect(faker), &apos;{[Symbol(Symbol.toStringTag)]:\ &apos;Symbol\&apos; }&apos;, &apos;object lying about being a Symbol inspects as an object&apos;);});t.end();}):&#160;values.js'],['../values_8js.html#acd071121e4b0f9be7c248e59b43bcbc0',1,'test(&apos;Map&apos;, { skip:typeof Map !==&apos;function&apos; }, function(t) { var map=new Map();map.set({ a:1 }, [&apos;b&apos;]);map.set(3, NaN);var expectedString=&apos;Map(2) {&apos;+inspect({ a:1 })+&apos;=&gt; &apos;+inspect([&apos;b&apos;])+&apos;, 3=&gt; NaN}&apos;;t.equal(inspect(map), expectedString, &apos;new Map([[{ a:1 }, [&quot;b&quot;]], [3, NaN]]) should show size and contents&apos;);t.equal(inspect(new Map()), &apos;Map(0) {}&apos;, &apos;empty Map should show as empty&apos;);var nestedMap=new Map();nestedMap.set(nestedMap, map);t.equal(inspect(nestedMap), &apos;Map(1) {[Circular]=&gt; &apos;+expectedString+&apos;}&apos;, &apos;Map containing a Map should work&apos;);t.end();}):&#160;values.js'],['../values_8js.html#af8a77dae1b589c91b41c3075a596e943',1,'test(&apos;WeakMap&apos;, { skip:typeof WeakMap !==&apos;function&apos; }, function(t) { var map=new WeakMap();map.set({ a:1 }, [&apos;b&apos;]);var expectedString=&apos;WeakMap { ? }&apos;;t.equal(inspect(map), expectedString, &apos;new WeakMap([[{ a:1 }, [&quot;b&quot;]]]) should not show size or contents&apos;);t.equal(inspect(new WeakMap()), &apos;WeakMap { ? }&apos;, &apos;empty WeakMap should not show as empty&apos;);t.end();}):&#160;values.js'],['../values_8js.html#a40cd9f9984aa8444c3cc450d4631456a',1,'test(&apos;Set&apos;, { skip:typeof Set !==&apos;function&apos; }, function(t) { var set=new Set();set.add({ a:1 });set.add([&apos;b&apos;]);var expectedString=&apos;Set(2) {&apos;+inspect({ a:1 })+&apos;, &apos;+inspect([&apos;b&apos;])+&apos;}&apos;;t.equal(inspect(set), expectedString, &apos;new Set([{ a:1 }, [&quot;b&quot;]]) should show size and contents&apos;);t.equal(inspect(new Set()), &apos;Set(0) {}&apos;, &apos;empty Set should show as empty&apos;);var nestedSet=new Set();nestedSet.add(set);nestedSet.add(nestedSet);t.equal(inspect(nestedSet), &apos;Set(2) {&apos;+expectedString+&apos;, [Circular]}&apos;, &apos;Set containing a Set should work&apos;);t.end();}):&#160;values.js'],['../values_8js.html#ace8a409b39af8c56ef82abc1783b58b5',1,'test(&apos;WeakSet&apos;, { skip:typeof WeakSet !==&apos;function&apos; }, function(t) { var map=new WeakSet();map.add({ a:1 });var expectedString=&apos;WeakSet { ? }&apos;;t.equal(inspect(map), expectedString, &apos;new WeakSet([{ a:1 }]) should not show size or contents&apos;);t.equal(inspect(new WeakSet()), &apos;WeakSet { ? }&apos;, &apos;empty WeakSet should not show as empty&apos;);t.end();}):&#160;values.js'],['../values_8js.html#a8f9ca11e7288b1b771e91427d7d22b18',1,'test(&apos;WeakRef&apos;, { skip:typeof WeakRef !==&apos;function&apos; }, function(t) { var ref=new WeakRef({ a:1 });var expectedString=&apos;WeakRef { ? }&apos;;t.equal(inspect(ref), expectedString, &apos;new WeakRef({ a:1 }) should not show contents&apos;);t.end();}):&#160;values.js'],['../values_8js.html#a82b204fdd0065a0320d05db858f38480',1,'test(&apos;FinalizationRegistry&apos;, { skip:typeof FinalizationRegistry !==&apos;function&apos; }, function(t) { var registry=new FinalizationRegistry(function() {});var expectedString=&apos;FinalizationRegistry[FinalizationRegistry] {}&apos;;t.equal(inspect(registry), expectedString, &apos;new FinalizationRegistry(function() {}) should work normallys&apos;);t.end();}):&#160;values.js'],['../test_2parse_8js.html#a9a441a0af1a6a72e238ef76210aa5881',1,'test(&apos;parse()&apos;, function(t) { t.test(&apos;parses a simple string&apos;, function(st) { st.deepEqual(qs.parse(&apos;0=foo&apos;), { 0:&apos;foo&apos; });st.deepEqual(qs.parse(&apos;foo=c++&apos;), { foo:&apos;c &apos; });st.deepEqual(qs.parse(&apos;a[&gt;=]=23&apos;), { a:{ &apos;&gt;=&apos;:&apos;23&apos; } });st.deepEqual(qs.parse(&apos;a[&lt;=&gt;]==23&apos;), { a:{ &apos;&lt;=&gt;&apos;:&apos;=23&apos; } });st.deepEqual(qs.parse(&apos;a[==]=23&apos;), { a:{ &apos;==&apos;:&apos;23&apos; } });st.deepEqual(qs.parse(&apos;foo&apos;, { strictNullHandling:true }), { foo:null });st.deepEqual(qs.parse(&apos;foo&apos;), { foo:&apos;&apos; });st.deepEqual(qs.parse(&apos;foo=&apos;), { foo:&apos;&apos; });st.deepEqual(qs.parse(&apos;foo=bar&apos;), { foo:&apos;bar&apos; });st.deepEqual(qs.parse(&apos; foo=bar=baz &apos;), { &apos; foo &apos;:&apos; bar=baz &apos; });st.deepEqual(qs.parse(&apos;foo=bar=baz&apos;), { foo:&apos;bar=baz&apos; });st.deepEqual(qs.parse(&apos;foo=bar &amp;bar=baz&apos;), { foo:&apos;bar&apos;, bar:&apos;baz&apos; });st.deepEqual(qs.parse(&apos;foo2=bar2 &amp;baz2=&apos;), { foo2:&apos;bar2&apos;, baz2:&apos;&apos; });st.deepEqual(qs.parse(&apos;foo=bar &amp;baz&apos;, { strictNullHandling:true }), { foo:&apos;bar&apos;, baz:null });st.deepEqual(qs.parse(&apos;foo=bar &amp;baz&apos;), { foo:&apos;bar&apos;, baz:&apos;&apos; });st.deepEqual(qs.parse(&apos;cht=p3 &amp;chd=t:60, 40 &amp;chs=250x100 &amp;chl=Hello|World&apos;), { cht:&apos;p3&apos;, chd:&apos;t:60, 40&apos;, chs:&apos;250x100&apos;, chl:&apos;Hello|World&apos; });st.end();});t.test(&apos;comma:false&apos;, function(st) { st.deepEqual(qs.parse(&apos;a[]=b &amp;a[]=c&apos;), { a:[&apos;b&apos;, &apos;c&apos;] });st.deepEqual(qs.parse(&apos;a[0]=b &amp;a[1]=c&apos;), { a:[&apos;b&apos;, &apos;c&apos;] });st.deepEqual(qs.parse(&apos;a=b, c&apos;), { a:&apos;b, c&apos; });st.deepEqual(qs.parse(&apos;a=b &amp;a=c&apos;), { a:[&apos;b&apos;, &apos;c&apos;] });st.end();});t.test(&apos;comma:true&apos;, function(st) { st.deepEqual(qs.parse(&apos;a[]=b &amp;a[]=c&apos;, { comma:true }), { a:[&apos;b&apos;, &apos;c&apos;] });st.deepEqual(qs.parse(&apos;a[0]=b &amp;a[1]=c&apos;, { comma:true }), { a:[&apos;b&apos;, &apos;c&apos;] });st.deepEqual(qs.parse(&apos;a=b, c&apos;, { comma:true }), { a:[&apos;b&apos;, &apos;c&apos;] });st.deepEqual(qs.parse(&apos;a=b &amp;a=c&apos;, { comma:true }), { a:[&apos;b&apos;, &apos;c&apos;] });st.end();});t.test(&apos;allows enabling dot notation&apos;, function(st) { st.deepEqual(qs.parse(&apos;a.b=c&apos;), { &apos;a.b&apos;:&apos;c&apos; });st.deepEqual(qs.parse(&apos;a.b=c&apos;, { allowDots:true }), { a:{ b:&apos;c&apos; } });st.end();});t.test(&apos;decode dot keys correctly&apos;, function(st) { st.deepEqual(qs.parse(&apos;name%252Eobj.first=John &amp;name%252Eobj.last=Doe&apos;, { allowDots:false, decodeDotInKeys:false }), { &apos;name%2Eobj.first&apos;:&apos;John&apos;, &apos;name%2Eobj.last&apos;:&apos;Doe&apos; }, &apos;with allowDots false and decodeDotInKeys false&apos;);st.deepEqual(qs.parse(&apos;name.obj.first=John &amp;name.obj.last=Doe&apos;, { allowDots:true, decodeDotInKeys:false }), { name:{ obj:{ first:&apos;John&apos;, last:&apos;Doe&apos; } } }, &apos;with allowDots false and decodeDotInKeys false&apos;);st.deepEqual(qs.parse(&apos;name%252Eobj.first=John &amp;name%252Eobj.last=Doe&apos;, { allowDots:true, decodeDotInKeys:false }), { &apos;name%2Eobj&apos;:{ first:&apos;John&apos;, last:&apos;Doe&apos; } }, &apos;with allowDots true and decodeDotInKeys false&apos;);st.deepEqual(qs.parse(&apos;name%252Eobj.first=John &amp;name%252Eobj.last=Doe&apos;, { allowDots:true, decodeDotInKeys:true }), { &apos;name.obj&apos;:{ first:&apos;John&apos;, last:&apos;Doe&apos; } }, &apos;with allowDots true and decodeDotInKeys true&apos;);st.deepEqual(qs.parse(&apos;name%252Eobj%252Esubobject.first%252Egodly%252Ename=John &amp;name%252Eobj%252Esubobject.last=Doe&apos;, { allowDots:false, decodeDotInKeys:false }), { &apos;name%2Eobj%2Esubobject.first%2Egodly%2Ename&apos;:&apos;John&apos;, &apos;name%2Eobj%2Esubobject.last&apos;:&apos;Doe&apos; }, &apos;with allowDots false and decodeDotInKeys false&apos;);st.deepEqual(qs.parse(&apos;name.obj.subobject.first.godly.name=John &amp;name.obj.subobject.last=Doe&apos;, { allowDots:true, decodeDotInKeys:false }), { name:{ obj:{ subobject:{ first:{ godly:{ name:&apos;John&apos; } }, last:&apos;Doe&apos; } } } }, &apos;with allowDots true and decodeDotInKeys false&apos;);st.deepEqual(qs.parse(&apos;name%252Eobj%252Esubobject.first%252Egodly%252Ename=John &amp;name%252Eobj%252Esubobject.last=Doe&apos;, { allowDots:true, decodeDotInKeys:true }), { &apos;name.obj.subobject&apos;:{ &apos;first.godly.name&apos;:&apos;John&apos;, last:&apos;Doe&apos; } }, &apos;with allowDots true and decodeDotInKeys true&apos;);st.deepEqual(qs.parse(&apos;name%252Eobj.first=John &amp;name%252Eobj.last=Doe&apos;), { &apos;name%2Eobj.first&apos;:&apos;John&apos;, &apos;name%2Eobj.last&apos;:&apos;Doe&apos; }, &apos;with allowDots and decodeDotInKeys undefined&apos;);st.end();});t.test(&apos;should decode dot in key of object, and allow enabling dot notation when decodeDotInKeys is set to true and allowDots is undefined&apos;, function(st) { st.deepEqual(qs.parse(&apos;name%252Eobj%252Esubobject.first%252Egodly%252Ename=John &amp;name%252Eobj%252Esubobject.last=Doe&apos;, { decodeDotInKeys:true }), { &apos;name.obj.subobject&apos;:{ &apos;first.godly.name&apos;:&apos;John&apos;, last:&apos;Doe&apos; } }, &apos;with allowDots undefined and decodeDotInKeys true&apos;);st.end();});t.test(&apos;should throw when decodeDotInKeys is not of type boolean&apos;, function(st) { st[&apos;throws&apos;](function() { qs.parse(&apos;foo[]&amp;bar=baz&apos;, { decodeDotInKeys:&apos;foobar&apos; });}, TypeError);st[&apos;throws&apos;](function() { qs.parse(&apos;foo[]&amp;bar=baz&apos;, { decodeDotInKeys:0 });}, TypeError);st[&apos;throws&apos;](function() { qs.parse(&apos;foo[]&amp;bar=baz&apos;, { decodeDotInKeys:NaN });}, TypeError);st[&apos;throws&apos;](function() { qs.parse(&apos;foo[]&amp;bar=baz&apos;, { decodeDotInKeys:null });}, TypeError);st.end();});t.test(&apos;allows empty arrays in obj values&apos;, function(st) { st.deepEqual(qs.parse(&apos;foo[]&amp;bar=baz&apos;, { allowEmptyArrays:true }), { foo:[], bar:&apos;baz&apos; });st.deepEqual(qs.parse(&apos;foo[]&amp;bar=baz&apos;, { allowEmptyArrays:false }), { foo:[&apos;&apos;], bar:&apos;baz&apos; });st.end();});t.test(&apos;should throw when allowEmptyArrays is not of type boolean&apos;, function(st) { st[&apos;throws&apos;](function() { qs.parse(&apos;foo[]&amp;bar=baz&apos;, { allowEmptyArrays:&apos;foobar&apos; });}, TypeError);st[&apos;throws&apos;](function() { qs.parse(&apos;foo[]&amp;bar=baz&apos;, { allowEmptyArrays:0 });}, TypeError);st[&apos;throws&apos;](function() { qs.parse(&apos;foo[]&amp;bar=baz&apos;, { allowEmptyArrays:NaN });}, TypeError);st[&apos;throws&apos;](function() { qs.parse(&apos;foo[]&amp;bar=baz&apos;, { allowEmptyArrays:null });}, TypeError);st.end();});t.test(&apos;allowEmptyArrays+strictNullHandling&apos;, function(st) { st.deepEqual(qs.parse(&apos;testEmptyArray[]&apos;, { strictNullHandling:true, allowEmptyArrays:true }), { testEmptyArray:[] });st.end();});t.deepEqual(qs.parse(&apos;a[b]=c&apos;), { a:{ b:&apos;c&apos; } }, &apos;parses a single nested string&apos;);t.deepEqual(qs.parse(&apos;a[b][c]=d&apos;), { a:{ b:{ c:&apos;d&apos; } } }, &apos;parses a double nested string&apos;);t.deepEqual(qs.parse(&apos;a[b][c][d][e][f][g][h]=i&apos;), { a:{ b:{ c:{ d:{ e:{ f:{ &apos;[g][h]&apos;:&apos;i&apos; } } } } } } }, &apos;defaults to a depth of 5&apos;);t.test(&apos;only parses one level when depth=1&apos;, function(st) { st.deepEqual(qs.parse(&apos;a[b][c]=d&apos;, { depth:1 }), { a:{ b:{ &apos;[c]&apos;:&apos;d&apos; } } });st.deepEqual(qs.parse(&apos;a[b][c][d]=e&apos;, { depth:1 }), { a:{ b:{ &apos;[c][d]&apos;:&apos;e&apos; } } });st.end();});t.test(&apos;uses original key when depth=0&apos;, function(st) { st.deepEqual(qs.parse(&apos;a[0]=b &amp;a[1]=c&apos;, { depth:0 }), { &apos;a[0]&apos;:&apos;b&apos;, &apos;a[1]&apos;:&apos;c&apos; });st.deepEqual(qs.parse(&apos;a[0][0]=b &amp;a[0][1]=c &amp;a[1]=d &amp;e=2&apos;, { depth:0 }), { &apos;a[0][0]&apos;:&apos;b&apos;, &apos;a[0][1]&apos;:&apos;c&apos;, &apos;a[1]&apos;:&apos;d&apos;, e:&apos;2&apos; });st.end();});t.test(&apos;uses original key when depth=false&apos;, function(st) { st.deepEqual(qs.parse(&apos;a[0]=b &amp;a[1]=c&apos;, { depth:false }), { &apos;a[0]&apos;:&apos;b&apos;, &apos;a[1]&apos;:&apos;c&apos; });st.deepEqual(qs.parse(&apos;a[0][0]=b &amp;a[0][1]=c &amp;a[1]=d &amp;e=2&apos;, { depth:false }), { &apos;a[0][0]&apos;:&apos;b&apos;, &apos;a[0][1]&apos;:&apos;c&apos;, &apos;a[1]&apos;:&apos;d&apos;, e:&apos;2&apos; });st.end();});t.deepEqual(qs.parse(&apos;a=b &amp;a=c&apos;), { a:[&apos;b&apos;, &apos;c&apos;] }, &apos;parses a simple array&apos;);t.test(&apos;parses an explicit array&apos;, function(st) { st.deepEqual(qs.parse(&apos;a[]=b&apos;), { a:[&apos;b&apos;] });st.deepEqual(qs.parse(&apos;a[]=b &amp;a[]=c&apos;), { a:[&apos;b&apos;, &apos;c&apos;] });st.deepEqual(qs.parse(&apos;a[]=b &amp;a[]=c &amp;a[]=d&apos;), { a:[&apos;b&apos;, &apos;c&apos;, &apos;d&apos;] });st.end();});t.test(&apos;parses a mix of simple and explicit arrays&apos;, function(st) { st.deepEqual(qs.parse(&apos;a=b &amp;a[]=c&apos;), { a:[&apos;b&apos;, &apos;c&apos;] });st.deepEqual(qs.parse(&apos;a[]=b &amp;a=c&apos;), { a:[&apos;b&apos;, &apos;c&apos;] });st.deepEqual(qs.parse(&apos;a[0]=b &amp;a=c&apos;), { a:[&apos;b&apos;, &apos;c&apos;] });st.deepEqual(qs.parse(&apos;a=b &amp;a[0]=c&apos;), { a:[&apos;b&apos;, &apos;c&apos;] });st.deepEqual(qs.parse(&apos;a[1]=b &amp;a=c&apos;, { arrayLimit:20 }), { a:[&apos;b&apos;, &apos;c&apos;] });st.deepEqual(qs.parse(&apos;a[]=b &amp;a=c&apos;, { arrayLimit:0 }), { a:[&apos;b&apos;, &apos;c&apos;] });st.deepEqual(qs.parse(&apos;a[]=b &amp;a=c&apos;), { a:[&apos;b&apos;, &apos;c&apos;] });st.deepEqual(qs.parse(&apos;a=b &amp;a[1]=c&apos;, { arrayLimit:20 }), { a:[&apos;b&apos;, &apos;c&apos;] });st.deepEqual(qs.parse(&apos;a=b &amp;a[]=c&apos;, { arrayLimit:0 }), { a:[&apos;b&apos;, &apos;c&apos;] });st.deepEqual(qs.parse(&apos;a=b &amp;a[]=c&apos;), { a:[&apos;b&apos;, &apos;c&apos;] });st.end();});t.test(&apos;parses a nested array&apos;, function(st) { st.deepEqual(qs.parse(&apos;a[b][]=c &amp;a[b][]=d&apos;), { a:{ b:[&apos;c&apos;, &apos;d&apos;] } });st.deepEqual(qs.parse(&apos;a[&gt;=]=25&apos;), { a:{ &apos;&gt;=&apos;:&apos;25&apos; } });st.end();});t.test(&apos;allows to specify array indices&apos;, function(st) { st.deepEqual(qs.parse(&apos;a[1]=c &amp;a[0]=b &amp;a[2]=d&apos;), { a:[&apos;b&apos;, &apos;c&apos;, &apos;d&apos;] });st.deepEqual(qs.parse(&apos;a[1]=c &amp;a[0]=b&apos;), { a:[&apos;b&apos;, &apos;c&apos;] });st.deepEqual(qs.parse(&apos;a[1]=c&apos;, { arrayLimit:20 }), { a:[&apos;c&apos;] });st.deepEqual(qs.parse(&apos;a[1]=c&apos;, { arrayLimit:0 }), { a:{ 1:&apos;c&apos; } });st.deepEqual(qs.parse(&apos;a[1]=c&apos;), { a:[&apos;c&apos;] });st.end();});t.test(&apos;limits specific array indices to arrayLimit&apos;, function(st) { st.deepEqual(qs.parse(&apos;a[20]=a&apos;, { arrayLimit:20 }), { a:[&apos;a&apos;] });st.deepEqual(qs.parse(&apos;a[21]=a&apos;, { arrayLimit:20 }), { a:{ 21:&apos;a&apos; } });st.deepEqual(qs.parse(&apos;a[20]=a&apos;), { a:[&apos;a&apos;] });st.deepEqual(qs.parse(&apos;a[21]=a&apos;), { a:{ 21:&apos;a&apos; } });st.end();});t.deepEqual(qs.parse(&apos;a[12b]=c&apos;), { a:{ &apos;12b&apos;:&apos;c&apos; } }, &apos;supports keys that begin with a number&apos;);t.test(&apos;supports encoded=signs&apos;, function(st) { st.deepEqual(qs.parse(&apos;he%3Dllo=th%3Dere&apos;), { &apos;he=llo&apos;:&apos;th=ere&apos; });st.end();});t.test(&apos;is ok with url encoded strings&apos;, function(st) { st.deepEqual(qs.parse(&apos;a[b%20c]=d&apos;), { a:{ &apos;b c&apos;:&apos;d&apos; } });st.deepEqual(qs.parse(&apos;a[b]=c%20d&apos;), { a:{ b:&apos;c d&apos; } });st.end();});t.test(&apos;allows brackets in the value&apos;, function(st) { st.deepEqual(qs.parse(&apos;pets=[&quot;tobi&quot;]&apos;), { pets:&apos;[&quot;tobi&quot;]&apos; });st.deepEqual(qs.parse(&apos;operators=[&quot;&gt;=&quot;, &quot;&lt;=&quot;]&apos;), { operators:&apos;[&quot;&gt;=&quot;, &quot;&lt;=&quot;]&apos; });st.end();});t.test(&apos;allows empty values&apos;, function(st) { st.deepEqual(qs.parse(&apos;&apos;), {});st.deepEqual(qs.parse(null), {});st.deepEqual(qs.parse(undefined), {});st.end();});t.test(&apos;transforms arrays to objects&apos;, function(st) { st.deepEqual(qs.parse(&apos;foo[0]=bar &amp;foo[bad]=baz&apos;), { foo:{ 0:&apos;bar&apos;, bad:&apos;baz&apos; } });st.deepEqual(qs.parse(&apos;foo[bad]=baz &amp;foo[0]=bar&apos;), { foo:{ bad:&apos;baz&apos;, 0:&apos;bar&apos; } });st.deepEqual(qs.parse(&apos;foo[bad]=baz &amp;foo[]=bar&apos;), { foo:{ bad:&apos;baz&apos;, 0:&apos;bar&apos; } });st.deepEqual(qs.parse(&apos;foo[]=bar &amp;foo[bad]=baz&apos;), { foo:{ 0:&apos;bar&apos;, bad:&apos;baz&apos; } });st.deepEqual(qs.parse(&apos;foo[bad]=baz &amp;foo[]=bar &amp;foo[]=foo&apos;), { foo:{ bad:&apos;baz&apos;, 0:&apos;bar&apos;, 1:&apos;foo&apos; } });st.deepEqual(qs.parse(&apos;foo[0][a]=a &amp;foo[0][b]=b &amp;foo[1][a]=aa &amp;foo[1][b]=bb&apos;), { foo:[{ a:&apos;a&apos;, b:&apos;b&apos; }, { a:&apos;aa&apos;, b:&apos;bb&apos; }] });st.deepEqual(qs.parse(&apos;a[]=b &amp;a[t]=u &amp;a[hasOwnProperty]=c&apos;, { allowPrototypes:false }), { a:{ 0:&apos;b&apos;, t:&apos;u&apos; } });st.deepEqual(qs.parse(&apos;a[]=b &amp;a[t]=u &amp;a[hasOwnProperty]=c&apos;, { allowPrototypes:true }), { a:{ 0:&apos;b&apos;, t:&apos;u&apos;, hasOwnProperty:&apos;c&apos; } });st.deepEqual(qs.parse(&apos;a[]=b &amp;a[hasOwnProperty]=c &amp;a[x]=y&apos;, { allowPrototypes:false }), { a:{ 0:&apos;b&apos;, x:&apos;y&apos; } });st.deepEqual(qs.parse(&apos;a[]=b &amp;a[hasOwnProperty]=c &amp;a[x]=y&apos;, { allowPrototypes:true }), { a:{ 0:&apos;b&apos;, hasOwnProperty:&apos;c&apos;, x:&apos;y&apos; } });st.end();});t.test(&apos;transforms arrays to objects(dot notation)&apos;, function(st) { st.deepEqual(qs.parse(&apos;foo[0].baz=bar &amp;fool.bad=baz&apos;, { allowDots:true }), { foo:[{ baz:&apos;bar&apos; }], fool:{ bad:&apos;baz&apos; } });st.deepEqual(qs.parse(&apos;foo[0].baz=bar &amp;fool.bad.boo=baz&apos;, { allowDots:true }), { foo:[{ baz:&apos;bar&apos; }], fool:{ bad:{ boo:&apos;baz&apos; } } });st.deepEqual(qs.parse(&apos;foo[0][0].baz=bar &amp;fool.bad=baz&apos;, { allowDots:true }), { foo:[[{ baz:&apos;bar&apos; }]], fool:{ bad:&apos;baz&apos; } });st.deepEqual(qs.parse(&apos;foo[0].baz[0]=15 &amp;foo[0].bar=2&apos;, { allowDots:true }), { foo:[{ baz:[&apos;15&apos;], bar:&apos;2&apos; }] });st.deepEqual(qs.parse(&apos;foo[0].baz[0]=15 &amp;foo[0].baz[1]=16 &amp;foo[0].bar=2&apos;, { allowDots:true }), { foo:[{ baz:[&apos;15&apos;, &apos;16&apos;], bar:&apos;2&apos; }] });st.deepEqual(qs.parse(&apos;foo.bad=baz &amp;foo[0]=bar&apos;, { allowDots:true }), { foo:{ bad:&apos;baz&apos;, 0:&apos;bar&apos; } });st.deepEqual(qs.parse(&apos;foo.bad=baz &amp;foo[]=bar&apos;, { allowDots:true }), { foo:{ bad:&apos;baz&apos;, 0:&apos;bar&apos; } });st.deepEqual(qs.parse(&apos;foo[]=bar &amp;foo.bad=baz&apos;, { allowDots:true }), { foo:{ 0:&apos;bar&apos;, bad:&apos;baz&apos; } });st.deepEqual(qs.parse(&apos;foo.bad=baz &amp;foo[]=bar &amp;foo[]=foo&apos;, { allowDots:true }), { foo:{ bad:&apos;baz&apos;, 0:&apos;bar&apos;, 1:&apos;foo&apos; } });st.deepEqual(qs.parse(&apos;foo[0].a=a &amp;foo[0].b=b &amp;foo[1].a=aa &amp;foo[1].b=bb&apos;, { allowDots:true }), { foo:[{ a:&apos;a&apos;, b:&apos;b&apos; }, { a:&apos;aa&apos;, b:&apos;bb&apos; }] });st.end();});t.test(&apos;correctly prunes undefined values when converting an array to an object&apos;, function(st) { st.deepEqual(qs.parse(&apos;a[2]=b &amp;a[99999999]=c&apos;), { a:{ 2:&apos;b&apos;, 99999999:&apos;c&apos; } });st.end();});t.test(&apos;supports malformed uri characters&apos;, function(st) { st.deepEqual(qs.parse(&apos;{%:%}&apos;, { strictNullHandling:true }), { &apos;{%:%}&apos;:null });st.deepEqual(qs.parse(&apos;{%:%}=&apos;), { &apos;{%:%}&apos;:&apos;&apos; });st.deepEqual(qs.parse(&apos;foo=%:%}&apos;), { foo:&apos;%:%}&apos; });st.end();});t.test(&apos;doesn\ &apos;t produce empty keys&apos;, function(st) { st.deepEqual(qs.parse(&apos;_r=1 &amp;&apos;), { _r:&apos;1&apos; });st.end();});t.test(&apos;cannot access Object prototype&apos;, function(st) { qs.parse(&apos;constructor[prototype][bad]=bad&apos;);qs.parse(&apos;bad[constructor][prototype][bad]=bad&apos;);st.equal(typeof Object.prototype.bad, &apos;undefined&apos;);st.end();});t.test(&apos;parses arrays of objects&apos;, function(st) { st.deepEqual(qs.parse(&apos;a[][b]=c&apos;), { a:[{ b:&apos;c&apos; }] });st.deepEqual(qs.parse(&apos;a[0][b]=c&apos;), { a:[{ b:&apos;c&apos; }] });st.end();});t.test(&apos;allows for empty strings in arrays&apos;, function(st) { st.deepEqual(qs.parse(&apos;a[]=b &amp;a[]=&amp;a[]=c&apos;), { a:[&apos;b&apos;, &apos;&apos;, &apos;c&apos;] });st.deepEqual(qs.parse(&apos;a[0]=b &amp;a[1]&amp;a[2]=c &amp;a[19]=&apos;, { strictNullHandling:true, arrayLimit:20 }), { a:[&apos;b&apos;, null, &apos;c&apos;, &apos;&apos;] }, &apos;with arrayLimit 20+array indices:null then empty string works&apos;);st.deepEqual(qs.parse(&apos;a[]=b &amp;a[]&amp;a[]=c &amp;a[]=&apos;, { strictNullHandling:true, arrayLimit:0 }), { a:[&apos;b&apos;, null, &apos;c&apos;, &apos;&apos;] }, &apos;with arrayLimit 0+array brackets:null then empty string works&apos;);st.deepEqual(qs.parse(&apos;a[0]=b &amp;a[1]=&amp;a[2]=c &amp;a[19]&apos;, { strictNullHandling:true, arrayLimit:20 }), { a:[&apos;b&apos;, &apos;&apos;, &apos;c&apos;, null] }, &apos;with arrayLimit 20+array indices:empty string then null works&apos;);st.deepEqual(qs.parse(&apos;a[]=b &amp;a[]=&amp;a[]=c &amp;a[]&apos;, { strictNullHandling:true, arrayLimit:0 }), { a:[&apos;b&apos;, &apos;&apos;, &apos;c&apos;, null] }, &apos;with arrayLimit 0+array brackets:empty string then null works&apos;);st.deepEqual(qs.parse(&apos;a[]=&amp;a[]=b &amp;a[]=c&apos;), { a:[&apos;&apos;, &apos;b&apos;, &apos;c&apos;] }, &apos;array brackets:empty strings work&apos;);st.end();});t.test(&apos;compacts sparse arrays&apos;, function(st) { st.deepEqual(qs.parse(&apos;a[10]=1 &amp;a[2]=2&apos;, { arrayLimit:20 }), { a:[&apos;2&apos;, &apos;1&apos;] });st.deepEqual(qs.parse(&apos;a[1][b][2][c]=1&apos;, { arrayLimit:20 }), { a:[{ b:[{ c:&apos;1&apos; }] }] });st.deepEqual(qs.parse(&apos;a[1][2][3][c]=1&apos;, { arrayLimit:20 }), { a:[[[{ c:&apos;1&apos; }]]] });st.deepEqual(qs.parse(&apos;a[1][2][3][c][1]=1&apos;, { arrayLimit:20 }), { a:[[[{ c:[&apos;1&apos;] }]]] });st.end();});t.test(&apos;parses sparse arrays&apos;, function(st) { st.deepEqual(qs.parse(&apos;a[4]=1 &amp;a[1]=2&apos;, { allowSparse:true }), { a:[, &apos;2&apos;,,, &apos;1&apos;] });st.deepEqual(qs.parse(&apos;a[1][b][2][c]=1&apos;, { allowSparse:true }), { a:[, { b:[,, { c:&apos;1&apos; }] }] });st.deepEqual(qs.parse(&apos;a[1][2][3][c]=1&apos;, { allowSparse:true }), { a:[, [,, [,,, { c:&apos;1&apos; }]]] });st.deepEqual(qs.parse(&apos;a[1][2][3][c][1]=1&apos;, { allowSparse:true }), { a:[, [,, [,,, { c:[, &apos;1&apos;] }]]] });st.end();});t.test(&apos;parses semi-parsed strings&apos;, function(st) { st.deepEqual(qs.parse({ &apos;a[b]&apos;:&apos;c&apos; }), { a:{ b:&apos;c&apos; } });st.deepEqual(qs.parse({ &apos;a[b]&apos;:&apos;c&apos;, &apos;a[d]&apos;:&apos;e&apos; }), { a:{ b:&apos;c&apos;, d:&apos;e&apos; } });st.end();});t.test(&apos;parses buffers correctly&apos;, function(st) { var b=SaferBuffer.from(&apos;test&apos;);st.deepEqual(qs.parse({ a:b }), { a:b });st.end();});t.test(&apos;parses jquery-param strings&apos;, function(st) { var encoded=&apos;filter%5B0%5D%5B%5D=int1 &amp;filter%5B0%5D%5B%5D=%3D &amp;filter%5B0%5D%5B%5D=77 &amp;filter%5B%5D=and &amp;filter%5B2%5D%5B%5D=int2 &amp;filter%5B2%5D%5B%5D=%3D &amp;filter%5B2%5D%5B%5D=8&apos;;var expected={ filter:[[&apos;int1&apos;, &apos;=&apos;, &apos;77&apos;], &apos;and&apos;, [&apos;int2&apos;, &apos;=&apos;, &apos;8&apos;]] };st.deepEqual(qs.parse(encoded), expected);st.end();});t.test(&apos;continues parsing when no parent is found&apos;, function(st) { st.deepEqual(qs.parse(&apos;[]=&amp;a=b&apos;), { 0:&apos;&apos;, a:&apos;b&apos; });st.deepEqual(qs.parse(&apos;[]&amp;a=b&apos;, { strictNullHandling:true }), { 0:null, a:&apos;b&apos; });st.deepEqual(qs.parse(&apos;[foo]=bar&apos;), { foo:&apos;bar&apos; });st.end();});t.test(&apos;does not error when parsing a very long array&apos;, function(st) { var str=&apos;a[]=a&apos;;while(Buffer.byteLength(str)&lt; 128 *1024) { str=str+&apos;&amp;&apos;+str;} st.doesNotThrow(function() { qs.parse(str);});st.end();});t.test(&apos;should not throw when a native prototype has an enumerable property&apos;, function(st) { st.intercept(Object.prototype, &apos;crash&apos;, { value:&apos;&apos; });st.intercept(Array.prototype, &apos;crash&apos;, { value:&apos;&apos; });st.doesNotThrow(qs.parse.bind(null, &apos;a=b&apos;));st.deepEqual(qs.parse(&apos;a=b&apos;), { a:&apos;b&apos; });st.doesNotThrow(qs.parse.bind(null, &apos;a[][b]=c&apos;));st.deepEqual(qs.parse(&apos;a[][b]=c&apos;), { a:[{ b:&apos;c&apos; }] });st.end();});t.test(&apos;parses a string with an alternative string delimiter&apos;, function(st) { st.deepEqual(qs.parse(&apos;a=b;c=d&apos;, { delimiter:&apos;;&apos; }), { a:&apos;b&apos;, c:&apos;d&apos; });st.end();});t.test(&apos;parses a string with an alternative RegExp delimiter&apos;, function(st) { st.deepEqual(qs.parse(&apos;a=b;c=d&apos;, { delimiter:/[;,] */}), { a:&apos;b&apos;, c:&apos;d&apos; });st.end();});t.test(&apos;does not use non-splittable objects as delimiters&apos;, function(st) { st.deepEqual(qs.parse(&apos;a=b &amp;c=d&apos;, { delimiter:true }), { a:&apos;b&apos;, c:&apos;d&apos; });st.end();});t.test(&apos;allows overriding parameter limit&apos;, function(st) { st.deepEqual(qs.parse(&apos;a=b &amp;c=d&apos;, { parameterLimit:1 }), { a:&apos;b&apos; });st.end();});t.test(&apos;allows setting the parameter limit to Infinity&apos;, function(st) { st.deepEqual(qs.parse(&apos;a=b &amp;c=d&apos;, { parameterLimit:Infinity }), { a:&apos;b&apos;, c:&apos;d&apos; });st.end();});t.test(&apos;allows overriding array limit&apos;, function(st) { st.deepEqual(qs.parse(&apos;a[0]=b&apos;, { arrayLimit:-1 }), { a:{ 0:&apos;b&apos; } });st.deepEqual(qs.parse(&apos;a[0]=b&apos;, { arrayLimit:0 }), { a:[&apos;b&apos;] });st.deepEqual(qs.parse(&apos;a[-1]=b&apos;, { arrayLimit:-1 }), { a:{ &apos;-1&apos;:&apos;b&apos; } });st.deepEqual(qs.parse(&apos;a[-1]=b&apos;, { arrayLimit:0 }), { a:{ &apos;-1&apos;:&apos;b&apos; } });st.deepEqual(qs.parse(&apos;a[0]=b &amp;a[1]=c&apos;, { arrayLimit:-1 }), { a:{ 0:&apos;b&apos;, 1:&apos;c&apos; } });st.deepEqual(qs.parse(&apos;a[0]=b &amp;a[1]=c&apos;, { arrayLimit:0 }), { a:{ 0:&apos;b&apos;, 1:&apos;c&apos; } });st.end();});t.test(&apos;allows disabling array parsing&apos;, function(st) { var indices=qs.parse(&apos;a[0]=b &amp;a[1]=c&apos;, { parseArrays:false });st.deepEqual(indices, { a:{ 0:&apos;b&apos;, 1:&apos;c&apos; } });st.equal(Array.isArray(indices.a), false, &apos;parseArrays:false, indices case is not an array&apos;);var emptyBrackets=qs.parse(&apos;a[]=b&apos;, { parseArrays:false });st.deepEqual(emptyBrackets, { a:{ 0:&apos;b&apos; } });st.equal(Array.isArray(emptyBrackets.a), false, &apos;parseArrays:false, empty brackets case is not an array&apos;);st.end();});t.test(&apos;allows for query string prefix&apos;, function(st) { st.deepEqual(qs.parse(&apos;?foo=bar&apos;, { ignoreQueryPrefix:true }), { foo:&apos;bar&apos; });st.deepEqual(qs.parse(&apos;foo=bar&apos;, { ignoreQueryPrefix:true }), { foo:&apos;bar&apos; });st.deepEqual(qs.parse(&apos;?foo=bar&apos;, { ignoreQueryPrefix:false }), { &apos;?foo&apos;:&apos;bar&apos; });st.end();});t.test(&apos;parses an object&apos;, function(st) { var input={ &apos;user[name]&apos;:{ &apos;pop[bob]&apos;:3 }, &apos;user[email]&apos;:null };var expected={ user:{ name:{ &apos;pop[bob]&apos;:3 }, email:null } };var result=qs.parse(input);st.deepEqual(result, expected);st.end();});t.test(&apos;parses string with comma as array divider&apos;, function(st) { st.deepEqual(qs.parse(&apos;foo=bar, tee&apos;, { comma:true }), { foo:[&apos;bar&apos;, &apos;tee&apos;] });st.deepEqual(qs.parse(&apos;foo[bar]=coffee, tee&apos;, { comma:true }), { foo:{ bar:[&apos;coffee&apos;, &apos;tee&apos;] } });st.deepEqual(qs.parse(&apos;foo=&apos;, { comma:true }), { foo:&apos;&apos; });st.deepEqual(qs.parse(&apos;foo&apos;, { comma:true }), { foo:&apos;&apos; });st.deepEqual(qs.parse(&apos;foo&apos;, { comma:true, strictNullHandling:true }), { foo:null });st.deepEqual(qs.parse(&apos;a[0]=c&apos;), { a:[&apos;c&apos;] });st.deepEqual(qs.parse(&apos;a[]=c&apos;), { a:[&apos;c&apos;] });st.deepEqual(qs.parse(&apos;a[]=c&apos;, { comma:true }), { a:[&apos;c&apos;] });st.deepEqual(qs.parse(&apos;a[0]=c &amp;a[1]=d&apos;), { a:[&apos;c&apos;, &apos;d&apos;] });st.deepEqual(qs.parse(&apos;a[]=c &amp;a[]=d&apos;), { a:[&apos;c&apos;, &apos;d&apos;] });st.deepEqual(qs.parse(&apos;a=c, d&apos;, { comma:true }), { a:[&apos;c&apos;, &apos;d&apos;] });st.end();});t.test(&apos;parses values with comma as array divider&apos;, function(st) { st.deepEqual(qs.parse({ foo:&apos;bar, tee&apos; }, { comma:false }), { foo:&apos;bar, tee&apos; });st.deepEqual(qs.parse({ foo:&apos;bar, tee&apos; }, { comma:true }), { foo:[&apos;bar&apos;, &apos;tee&apos;] });st.end();});t.test(&apos;use number decoder, parses string that has one number with comma option enabled&apos;, function(st) { var decoder=function(str, defaultDecoder, charset, type) { if(!isNaN(Number(str))) { return parseFloat(str);} return defaultDecoder(str, defaultDecoder, charset, type);};st.deepEqual(qs.parse(&apos;foo=1&apos;, { comma:true, decoder:decoder }), { foo:1 });st.deepEqual(qs.parse(&apos;foo=0&apos;, { comma:true, decoder:decoder }), { foo:0 });st.end();});t.test(&apos;parses brackets holds array of arrays when having two parts of strings with comma as array divider&apos;, function(st) { st.deepEqual(qs.parse(&apos;foo[]=1, 2, 3 &amp;foo[]=4, 5, 6&apos;, { comma:true }), { foo:[[&apos;1&apos;, &apos;2&apos;, &apos;3&apos;], [&apos;4&apos;, &apos;5&apos;, &apos;6&apos;]] });st.deepEqual(qs.parse(&apos;foo[]=1, 2, 3 &amp;foo[]=&apos;, { comma:true }), { foo:[[&apos;1&apos;, &apos;2&apos;, &apos;3&apos;], &apos;&apos;] });st.deepEqual(qs.parse(&apos;foo[]=1, 2, 3 &amp;foo[]=,&apos;, { comma:true }), { foo:[[&apos;1&apos;, &apos;2&apos;, &apos;3&apos;], [&apos;&apos;, &apos;&apos;]] });st.deepEqual(qs.parse(&apos;foo[]=1, 2, 3 &amp;foo[]=a&apos;, { comma:true }), { foo:[[&apos;1&apos;, &apos;2&apos;, &apos;3&apos;], &apos;a&apos;] });st.end();});t.test(&apos;parses url-encoded brackets holds array of arrays when having two parts of strings with comma as array divider&apos;, function(st) { st.deepEqual(qs.parse(&apos;foo%5B%5D=1, 2, 3 &amp;foo%5B%5D=4, 5, 6&apos;, { comma:true }), { foo:[[&apos;1&apos;, &apos;2&apos;, &apos;3&apos;], [&apos;4&apos;, &apos;5&apos;, &apos;6&apos;]] });st.deepEqual(qs.parse(&apos;foo%5B%5D=1, 2, 3 &amp;foo%5B%5D=&apos;, { comma:true }), { foo:[[&apos;1&apos;, &apos;2&apos;, &apos;3&apos;], &apos;&apos;] });st.deepEqual(qs.parse(&apos;foo%5B%5D=1, 2, 3 &amp;foo%5B%5D=,&apos;, { comma:true }), { foo:[[&apos;1&apos;, &apos;2&apos;, &apos;3&apos;], [&apos;&apos;, &apos;&apos;]] });st.deepEqual(qs.parse(&apos;foo%5B%5D=1, 2, 3 &amp;foo%5B%5D=a&apos;, { comma:true }), { foo:[[&apos;1&apos;, &apos;2&apos;, &apos;3&apos;], &apos;a&apos;] });st.end();});t.test(&apos;parses comma delimited array while having percent-encoded comma treated as normal text&apos;, function(st) { st.deepEqual(qs.parse(&apos;foo=a%2Cb&apos;, { comma:true }), { foo:&apos;a, b&apos; });st.deepEqual(qs.parse(&apos;foo=a%2C%20b, d&apos;, { comma:true }), { foo:[&apos;a, b&apos;, &apos;d&apos;] });st.deepEqual(qs.parse(&apos;foo=a%2C%20b, c%2C%20d&apos;, { comma:true }), { foo:[&apos;a, b&apos;, &apos;c, d&apos;] });st.end();});t.test(&apos;parses an object in dot notation&apos;, function(st) { var input={ &apos;user.name&apos;:{ &apos;pop[bob]&apos;:3 }, &apos;user.email.&apos;:null };var expected={ user:{ name:{ &apos;pop[bob]&apos;:3 }, email:null } };var result=qs.parse(input, { allowDots:true });st.deepEqual(result, expected);st.end();});t.test(&apos;parses an object and not child values&apos;, function(st) { var input={ &apos;user[name]&apos;:{ &apos;pop[bob]&apos;:{ test:3 } }, &apos;user[email]&apos;:null };var expected={ user:{ name:{ &apos;pop[bob]&apos;:{ test:3 } }, email:null } };var result=qs.parse(input);st.deepEqual(result, expected);st.end();});t.test(&apos;does not blow up when Buffer global is missing&apos;, function(st) { var restore=mockProperty(global, &apos;Buffer&apos;, { &apos;delete&apos;:true });var result=qs.parse(&apos;a=b &amp;c=d&apos;);restore();st.deepEqual(result, { a:&apos;b&apos;, c:&apos;d&apos; });st.end();});t.test(&apos;does not crash when parsing circular references&apos;, function(st) { var a={};a.b=a;var parsed;st.doesNotThrow(function() { parsed=qs.parse({ &apos;foo[bar]&apos;:&apos;baz&apos;, &apos;foo[baz]&apos;:a });});st.equal(&apos;foo&apos; in parsed, true, &apos;parsed has &quot;foo&quot; property&apos;);st.equal(&apos;bar&apos; in parsed.foo, true);st.equal(&apos;baz&apos; in parsed.foo, true);st.equal(parsed.foo.bar, &apos;baz&apos;);st.deepEqual(parsed.foo.baz, a);st.end();});t.test(&apos;does not crash when parsing deep objects&apos;, function(st) { var parsed;var str=&apos;foo&apos;;for(var i=0;i&lt; 5000;i++) { str+=&apos;[p]&apos;;} str+=&apos;=bar&apos;;st.doesNotThrow(function() { parsed=qs.parse(str, { depth:5000 });});st.equal(&apos;foo&apos; in parsed, true, &apos;parsed has &quot;foo&quot; property&apos;);var depth=0;var ref=parsed.foo;while((ref=ref.p)) { depth+=1;} st.equal(depth, 5000, &apos;parsed is 5000 properties deep&apos;);st.end();});t.test(&apos;parses null objects correctly&apos;, { skip:!Object.create }, function(st) { var a=Object.create(null);a.b=&apos;c&apos;;st.deepEqual(qs.parse(a), { b:&apos;c&apos; });var result=qs.parse({ a:a });st.equal(&apos;a&apos; in result, true, &apos;result has &quot;a&quot; property&apos;);st.deepEqual(result.a, a);st.end();});t.test(&apos;parses dates correctly&apos;, function(st) { var now=new Date();st.deepEqual(qs.parse({ a:now }), { a:now });st.end();});t.test(&apos;parses regular expressions correctly&apos;, function(st) { var re=/^test$/;st.deepEqual(qs.parse({ a:re }), { a:re });st.end();});t.test(&apos;does not allow overwriting prototype properties&apos;, function(st) { st.deepEqual(qs.parse(&apos;a[hasOwnProperty]=b&apos;, { allowPrototypes:false }), {});st.deepEqual(qs.parse(&apos;hasOwnProperty=b&apos;, { allowPrototypes:false }), {});st.deepEqual(qs.parse(&apos;toString&apos;, { allowPrototypes:false }), {}, &apos;bare &quot;toString&quot; results in {}&apos;);st.end();});t.test(&apos;can allow overwriting prototype properties&apos;, function(st) { st.deepEqual(qs.parse(&apos;a[hasOwnProperty]=b&apos;, { allowPrototypes:true }), { a:{ hasOwnProperty:&apos;b&apos; } });st.deepEqual(qs.parse(&apos;hasOwnProperty=b&apos;, { allowPrototypes:true }), { hasOwnProperty:&apos;b&apos; });st.deepEqual(qs.parse(&apos;toString&apos;, { allowPrototypes:true }), { toString:&apos;&apos; }, &apos;bare &quot;toString&quot; results in { toString:&quot;&quot; }&apos;);st.end();});t.test(&apos;does not crash when the global Object prototype is frozen&apos;, { skip:!hasPropertyDescriptors||!hasOverrideMistake }, function(st) { st.teardown(mockProperty(Object.prototype, &apos;frozenProp&apos;, { value:&apos;foo&apos;, nonWritable:true, nonEnumerable:true }));st[&apos;throws&apos;](function() { var obj={};obj.frozenProp=&apos;bar&apos;;},/^TypeError:Cannot assign to read only property &apos;frozenProp&apos; of(?:object &apos;#&lt; Object &gt;&apos;|#&lt; Object &gt;)/, &apos;regular assignment of an inherited non-writable property throws&apos;);var parsed;st.doesNotThrow(function() { parsed=qs.parse(&apos;frozenProp&apos;, { allowPrototypes:false });}, &apos;parsing a nonwritable Object.prototype property does not throw&apos;);st.deepEqual(parsed, {}, &apos;bare &quot;frozenProp&quot; results in {}&apos;);st.end();});t.test(&apos;params starting with a closing bracket&apos;, function(st) { st.deepEqual(qs.parse(&apos;]=toString&apos;), { &apos;]&apos;:&apos;toString&apos; });st.deepEqual(qs.parse(&apos;]]=toString&apos;), { &apos;]]&apos;:&apos;toString&apos; });st.deepEqual(qs.parse(&apos;]hello]=toString&apos;), { &apos;]hello]&apos;:&apos;toString&apos; });st.end();});t.test(&apos;params starting with a starting bracket&apos;, function(st) { st.deepEqual(qs.parse(&apos;[=toString&apos;), { &apos;[&apos;:&apos;toString&apos; });st.deepEqual(qs.parse(&apos;[[=toString&apos;), { &apos;[[&apos;:&apos;toString&apos; });st.deepEqual(qs.parse(&apos;[hello[=toString&apos;), { &apos;[hello[&apos;:&apos;toString&apos; });st.end();});t.test(&apos;add keys to objects&apos;, function(st) { st.deepEqual(qs.parse(&apos;a[b]=c &amp;a=d&apos;), { a:{ b:&apos;c&apos;, d:true } }, &apos;can add keys to objects&apos;);st.deepEqual(qs.parse(&apos;a[b]=c &amp;a=toString&apos;), { a:{ b:&apos;c&apos; } }, &apos;can not overwrite prototype&apos;);st.deepEqual(qs.parse(&apos;a[b]=c &amp;a=toString&apos;, { allowPrototypes:true }), { a:{ b:&apos;c&apos;, toString:true } }, &apos;can overwrite prototype with allowPrototypes true&apos;);st.deepEqual(qs.parse(&apos;a[b]=c &amp;a=toString&apos;, { plainObjects:true }), { __proto__:null, a:{ __proto__:null, b:&apos;c&apos;, toString:true } }, &apos;can overwrite prototype with plainObjects true&apos;);st.end();});t.test(&apos;dunder proto is ignored&apos;, function(st) { var payload=&apos;categories[__proto__]=login &amp;categories[__proto__]&amp;categories[length]=42&apos;;var result=qs.parse(payload, { allowPrototypes:true });st.deepEqual(result, { categories:{ length:&apos;42&apos; } }, &apos;silent[[Prototype]] payload&apos;);var plainResult=qs.parse(payload, { allowPrototypes:true, plainObjects:true });st.deepEqual(plainResult, { __proto__:null, categories:{ __proto__:null, length:&apos;42&apos; } }, &apos;silent[[Prototype]] payload:plain objects&apos;);var query=qs.parse(&apos;categories[__proto__]=cats &amp;categories[__proto__]=dogs &amp;categories[some][json]=toInject&apos;, { allowPrototypes:true });st.notOk(Array.isArray(query.categories), &apos;is not an array&apos;);st.notOk(query.categories instanceof Array, &apos;is not instanceof an array&apos;);st.deepEqual(query.categories, { some:{ json:&apos;toInject&apos; } });st.equal(JSON.stringify(query.categories), &apos;{&quot;some&quot;:{&quot;json&quot;:&quot;toInject&quot;}}&apos;, &apos;stringifies as a non-array&apos;);st.deepEqual(qs.parse(&apos;foo[__proto__][hidden]=value &amp;foo[bar]=stuffs&apos;, { allowPrototypes:true }), { foo:{ bar:&apos;stuffs&apos; } }, &apos;hidden values&apos;);st.deepEqual(qs.parse(&apos;foo[__proto__][hidden]=value &amp;foo[bar]=stuffs&apos;, { allowPrototypes:true, plainObjects:true }), { __proto__:null, foo:{ __proto__:null, bar:&apos;stuffs&apos; } }, &apos;hidden values:plain objects&apos;);st.end();});t.test(&apos;can return null objects&apos;, { skip:!Object.create }, function(st) { var expected=Object.create(null);expected.a=Object.create(null);expected.a.b=&apos;c&apos;;expected.a.hasOwnProperty=&apos;d&apos;;st.deepEqual(qs.parse(&apos;a[b]=c &amp;a[hasOwnProperty]=d&apos;, { plainObjects:true }), expected);st.deepEqual(qs.parse(null, { plainObjects:true }), Object.create(null));var expectedArray=Object.create(null);expectedArray.a=Object.create(null);expectedArray.a[0]=&apos;b&apos;;expectedArray.a.c=&apos;d&apos;;st.deepEqual(qs.parse(&apos;a[]=b &amp;a[c]=d&apos;, { plainObjects:true }), expectedArray);st.end();});t.test(&apos;can parse with custom encoding&apos;, function(st) { st.deepEqual(qs.parse(&apos;%8c%a7=%91%e5%8d%e3%95%7b&apos;, { decoder:function(str) { var reg=/%([0-9A-F]{2})/ig;var result=[];var parts=reg.exec(str);while(parts) { result.push(parseInt(parts[1], 16));parts=reg.exec(str);} return String(iconv.decode(SaferBuffer.from(result), &apos;shift_jis&apos;));} }), { 県:&apos;大阪府&apos; });st.end();});t.test(&apos;receives the default decoder as a second argument&apos;, function(st) { st.plan(1);qs.parse(&apos;a&apos;, { decoder:function(str, defaultDecoder) { st.equal(defaultDecoder, utils.decode);} });st.end();});t.test(&apos;throws error with wrong decoder&apos;, function(st) { st[&apos;throws&apos;](function() { qs.parse({}, { decoder:&apos;string&apos; });}, new TypeError(&apos;Decoder has to be a function.&apos;));st.end();});t.test(&apos;does not mutate the options argument&apos;, function(st) { var options={};qs.parse(&apos;a[b]=true&apos;, options);st.deepEqual(options, {});st.end();});t.test(&apos;throws if an invalid charset is specified&apos;, function(st) { st[&apos;throws&apos;](function() { qs.parse(&apos;a=b&apos;, { charset:&apos;foobar&apos; });}, new TypeError(&apos;The charset option must be either utf-8, iso-8859-1, or undefined&apos;));st.end();});t.test(&apos;parses an iso-8859-1 string if asked to&apos;, function(st) { st.deepEqual(qs.parse(&apos;%A2=%BD&apos;, { charset:&apos;iso-8859-1&apos; }), { &apos;¢&apos;:&apos;½&apos; });st.end();});var urlEncodedCheckmarkInUtf8=&apos;%E2%9C%93&apos;;var urlEncodedOSlashInUtf8=&apos;%C3%B8&apos;;var urlEncodedNumCheckmark=&apos;%26%2310003%3B&apos;;var urlEncodedNumSmiley=&apos;%26%239786%3B&apos;;t.test(&apos;prefers an utf-8 charset specified by the utf8 sentinel to a default charset of iso-8859-1&apos;, function(st) { st.deepEqual(qs.parse(&apos;utf8=&apos;+urlEncodedCheckmarkInUtf8+&apos;&amp;&apos;+urlEncodedOSlashInUtf8+&apos;=&apos;+urlEncodedOSlashInUtf8, { charsetSentinel:true, charset:&apos;iso-8859-1&apos; }), { ø:&apos;ø&apos; });st.end();});t.test(&apos;prefers an iso-8859-1 charset specified by the utf8 sentinel to a default charset of utf-8&apos;, function(st) { st.deepEqual(qs.parse(&apos;utf8=&apos;+urlEncodedNumCheckmark+&apos;&amp;&apos;+urlEncodedOSlashInUtf8+&apos;=&apos;+urlEncodedOSlashInUtf8, { charsetSentinel:true, charset:&apos;utf-8&apos; }), { &apos;Ã¸&apos;:&apos;Ã¸&apos; });st.end();});t.test(&apos;does not require the utf8 sentinel to be defined before the parameters whose decoding it affects&apos;, function(st) { st.deepEqual(qs.parse(&apos;a=&apos;+urlEncodedOSlashInUtf8+&apos;&amp;utf8=&apos;+urlEncodedNumCheckmark, { charsetSentinel:true, charset:&apos;utf-8&apos; }), { a:&apos;Ã¸&apos; });st.end();});t.test(&apos;should ignore an utf8 sentinel with an unknown value&apos;, function(st) { st.deepEqual(qs.parse(&apos;utf8=foo &amp;&apos;+urlEncodedOSlashInUtf8+&apos;=&apos;+urlEncodedOSlashInUtf8, { charsetSentinel:true, charset:&apos;utf-8&apos; }), { ø:&apos;ø&apos; });st.end();});t.test(&apos;uses the utf8 sentinel to switch to utf-8 when no default charset is given&apos;, function(st) { st.deepEqual(qs.parse(&apos;utf8=&apos;+urlEncodedCheckmarkInUtf8+&apos;&amp;&apos;+urlEncodedOSlashInUtf8+&apos;=&apos;+urlEncodedOSlashInUtf8, { charsetSentinel:true }), { ø:&apos;ø&apos; });st.end();});t.test(&apos;uses the utf8 sentinel to switch to iso-8859-1 when no default charset is given&apos;, function(st) { st.deepEqual(qs.parse(&apos;utf8=&apos;+urlEncodedNumCheckmark+&apos;&amp;&apos;+urlEncodedOSlashInUtf8+&apos;=&apos;+urlEncodedOSlashInUtf8, { charsetSentinel:true }), { &apos;Ã¸&apos;:&apos;Ã¸&apos; });st.end();});t.test(&apos;interprets numeric entities in iso-8859-1 when `interpretNumericEntities`&apos;, function(st) { st.deepEqual(qs.parse(&apos;foo=&apos;+urlEncodedNumSmiley, { charset:&apos;iso-8859-1&apos;, interpretNumericEntities:true }), { foo:&apos;☺&apos; });st.end();});t.test(&apos;handles a custom decoder returning `null`, in the `iso-8859-1` charset, when `interpretNumericEntities`&apos;, function(st) { st.deepEqual(qs.parse(&apos;foo=&amp;bar=&apos;+urlEncodedNumSmiley, { charset:&apos;iso-8859-1&apos;, decoder:function(str, defaultDecoder, charset) { return str ? defaultDecoder(str, defaultDecoder, charset) :null;}, interpretNumericEntities:true }), { foo:null, bar:&apos;☺&apos; });st.end();});t.test(&apos;does not interpret numeric entities in iso-8859-1 when `interpretNumericEntities` is absent&apos;, function(st) { st.deepEqual(qs.parse(&apos;foo=&apos;+urlEncodedNumSmiley, { charset:&apos;iso-8859-1&apos; }), { foo:&apos;&amp;#9786;&apos; });st.end();});t.test(&apos;does not interpret numeric entities when the charset is utf-8, even when `interpretNumericEntities`&apos;, function(st) { st.deepEqual(qs.parse(&apos;foo=&apos;+urlEncodedNumSmiley, { charset:&apos;utf-8&apos;, interpretNumericEntities:true }), { foo:&apos;&amp;#9786;&apos; });st.end();});t.test(&apos;does not interpret %uXXXX syntax in iso-8859-1 mode&apos;, function(st) { st.deepEqual(qs.parse(&apos;%u263A=%u263A&apos;, { charset:&apos;iso-8859-1&apos; }), { &apos;%u263A&apos;:&apos;%u263A&apos; });st.end();});t.test(&apos;allows for decoding keys and values differently&apos;, function(st) { var decoder=function(str, defaultDecoder, charset, type) { if(type===&apos;key&apos;) { return defaultDecoder(str, defaultDecoder, charset, type).toLowerCase();} if(type===&apos;value&apos;) { return defaultDecoder(str, defaultDecoder, charset, type).toUpperCase();} throw &apos;this should never happen! type:&apos;+type;};st.deepEqual(qs.parse(&apos;KeY=vAlUe&apos;, { decoder:decoder }), { key:&apos;VALUE&apos; });st.end();});t.end();}):&#160;parse.js'],['../test_2parse_8js.html#add7a6cdecbc66b8f70f25c5936fec645',1,'test(&apos;parses empty keys&apos;, function(t) { emptyTestCases.forEach(function(testCase) { t.test(&apos;skips empty string key with &apos;+testCase.input, function(st) { st.deepEqual(qs.parse(testCase.input), testCase.noEmptyKeys);st.end();});});}):&#160;parse.js'],['../test_2parse_8js.html#a33dbe180e62c4879120e834ff161ce10',1,'test(&apos;`duplicates` option&apos;, function(t) { v.nonStrings.concat(&apos;not a valid option&apos;).forEach(function(invalidOption) { if(typeof invalidOption !==&apos;undefined&apos;) { t[&apos;throws&apos;](function() { qs.parse(&apos;&apos;, { duplicates:invalidOption });}, TypeError, &apos;throws on invalid option:&apos;+inspect(invalidOption));} });t.deepEqual(qs.parse(&apos;foo=bar &amp;foo=baz&apos;), { foo:[&apos;bar&apos;, &apos;baz&apos;] }, &apos;duplicates:default, combine&apos;);t.deepEqual(qs.parse(&apos;foo=bar &amp;foo=baz&apos;, { duplicates:&apos;combine&apos; }), { foo:[&apos;bar&apos;, &apos;baz&apos;] }, &apos;duplicates:combine&apos;);t.deepEqual(qs.parse(&apos;foo=bar &amp;foo=baz&apos;, { duplicates:&apos;first&apos; }), { foo:&apos;bar&apos; }, &apos;duplicates:first&apos;);t.deepEqual(qs.parse(&apos;foo=bar &amp;foo=baz&apos;, { duplicates:&apos;last&apos; }), { foo:&apos;baz&apos; }, &apos;duplicates:last&apos;);t.end();}):&#160;parse.js'],['../test_2parse_8js.html#a49f2ca65ed9f1e6a6549d20b7fcf1603',1,'test(&apos;qs strictDepth option - throw cases&apos;, function(t) { t.test(&apos;throws an exception when depth exceeds the limit with strictDepth:true&apos;, function(st) { st[&apos;throws&apos;](function() { qs.parse(&apos;a[b][c][d][e][f][g][h][i]=j&apos;, { depth:1, strictDepth:true });}, RangeError, &apos;Should throw RangeError&apos;);st.end();});t.test(&apos;throws an exception for multiple nested arrays with strictDepth:true&apos;, function(st) { st[&apos;throws&apos;](function() { qs.parse(&apos;a[0][1][2][3][4]=b&apos;, { depth:3, strictDepth:true });}, RangeError, &apos;Should throw RangeError&apos;);st.end();});t.test(&apos;throws an exception for nested objects and arrays with strictDepth:true&apos;, function(st) { st[&apos;throws&apos;](function() { qs.parse(&apos;a[b][c][0][d][e]=f&apos;, { depth:3, strictDepth:true });}, RangeError, &apos;Should throw RangeError&apos;);st.end();});t.test(&apos;throws an exception for different types of values with strictDepth:true&apos;, function(st) { st[&apos;throws&apos;](function() { qs.parse(&apos;a[b][c][d][e]=true &amp;a[b][c][d][f]=42&apos;, { depth:3, strictDepth:true });}, RangeError, &apos;Should throw RangeError&apos;);st.end();});}):&#160;parse.js'],['../test_2parse_8js.html#a16809456dc029784c0402a88a89fb9c2',1,'test(&apos;qs strictDepth option - non-throw cases&apos;, function(t) { t.test(&apos;when depth is 0 and strictDepth true, do not throw&apos;, function(st) { st.doesNotThrow(function() { qs.parse(&apos;a[b][c][d][e]=true &amp;a[b][c][d][f]=42&apos;, { depth:0, strictDepth:true });}, RangeError, &apos;Should not throw RangeError&apos;);st.end();});t.test(&apos;parses successfully when depth is within the limit with strictDepth:true&apos;, function(st) { st.doesNotThrow(function() { var result=qs.parse(&apos;a[b]=c&apos;, { depth:1, strictDepth:true });st.deepEqual(result, { a:{ b:&apos;c&apos; } }, &apos;Should parse correctly&apos;);});st.end();});t.test(&apos;does not throw an exception when depth exceeds the limit with strictDepth:false&apos;, function(st) { st.doesNotThrow(function() { var result=qs.parse(&apos;a[b][c][d][e][f][g][h][i]=j&apos;, { depth:1 });st.deepEqual(result, { a:{ b:{ &apos;[c][d][e][f][g][h][i]&apos;:&apos;j&apos; } } }, &apos;Should parse with depth limit&apos;);});st.end();});t.test(&apos;parses successfully when depth is within the limit with strictDepth:false&apos;, function(st) { st.doesNotThrow(function() { var result=qs.parse(&apos;a[b]=c&apos;, { depth:1 });st.deepEqual(result, { a:{ b:&apos;c&apos; } }, &apos;Should parse correctly&apos;);});st.end();});t.test(&apos;does not throw when depth is exactly at the limit with strictDepth:true&apos;, function(st) { st.doesNotThrow(function() { var result=qs.parse(&apos;a[b][c]=d&apos;, { depth:2, strictDepth:true });st.deepEqual(result, { a:{ b:{ c:&apos;d&apos; } } }, &apos;Should parse correctly&apos;);});st.end();});}):&#160;parse.js'],['../qs_2test_2utils_8js.html#a57a3495dd6c527db5b99232806ce8880',1,'test(&apos;merge()&apos;, function(t) { t.deepEqual(utils.merge(null, true), [null, true], &apos;merges true into null&apos;);t.deepEqual(utils.merge(null, [42]), [null, 42], &apos;merges null into an array&apos;);t.deepEqual(utils.merge({ a:&apos;b&apos; }, { a:&apos;c&apos; }), { a:[&apos;b&apos;, &apos;c&apos;] }, &apos;merges two objects with the same key&apos;);var oneMerged=utils.merge({ foo:&apos;bar&apos; }, { foo:{ first:&apos;123&apos; } });t.deepEqual(oneMerged, { foo:[&apos;bar&apos;, { first:&apos;123&apos; }] }, &apos;merges a standalone and an object into an array&apos;);var twoMerged=utils.merge({ foo:[&apos;bar&apos;, { first:&apos;123&apos; }] }, { foo:{ second:&apos;456&apos; } });t.deepEqual(twoMerged, { foo:{ 0:&apos;bar&apos;, 1:{ first:&apos;123&apos; }, second:&apos;456&apos; } }, &apos;merges a standalone and two objects into an array&apos;);var sandwiched=utils.merge({ foo:[&apos;bar&apos;, { first:&apos;123&apos;, second:&apos;456&apos; }] }, { foo:&apos;baz&apos; });t.deepEqual(sandwiched, { foo:[&apos;bar&apos;, { first:&apos;123&apos;, second:&apos;456&apos; }, &apos;baz&apos;] }, &apos;merges an object sandwiched by two standalones into an array&apos;);var nestedArrays=utils.merge({ foo:[&apos;baz&apos;] }, { foo:[&apos;bar&apos;, &apos;xyzzy&apos;] });t.deepEqual(nestedArrays, { foo:[&apos;baz&apos;, &apos;bar&apos;, &apos;xyzzy&apos;] });var noOptionsNonObjectSource=utils.merge({ foo:&apos;baz&apos; }, &apos;bar&apos;);t.deepEqual(noOptionsNonObjectSource, { foo:&apos;baz&apos;, bar:true });t.test(&apos;avoids invoking array setters unnecessarily&apos;, { skip:typeof Object.defineProperty !==&apos;function&apos; }, function(st) { var setCount=0;var getCount=0;var observed=[];Object.defineProperty(observed, 0, { get:function() { getCount+=1;return { bar:&apos;baz&apos; };}, set:function() { setCount+=1;} });utils.merge(observed, [null]);st.equal(setCount, 0);st.equal(getCount, 1);observed[0]=observed[0];st.equal(setCount, 1);st.equal(getCount, 2);st.end();});t.end();}):&#160;utils.js'],['../qs_2test_2utils_8js.html#a0f9e2bb772f736b19fafef3efb4f570f',1,'test(&apos;assign()&apos;, function(t) { var target={ a:1, b:2 };var source={ b:3, c:4 };var result=utils.assign(target, source);t.equal(result, target, &apos;returns the target&apos;);t.deepEqual(target, { a:1, b:3, c:4 }, &apos;target and source are merged&apos;);t.deepEqual(source, { b:3, c:4 }, &apos;source is untouched&apos;);t.end();}):&#160;utils.js'],['../qs_2test_2utils_8js.html#a565714f0524c80c3f458bbee2b43d65b',1,'test(&apos;combine()&apos;, function(t) { t.test(&apos;both arrays&apos;, function(st) { var a=[1];var b=[2];var combined=utils.combine(a, b);st.deepEqual(a, [1], &apos;a is not mutated&apos;);st.deepEqual(b, [2], &apos;b is not mutated&apos;);st.notEqual(a, combined, &apos;a !==combined&apos;);st.notEqual(b, combined, &apos;b !==combined&apos;);st.deepEqual(combined, [1, 2], &apos;combined is a+b&apos;);st.end();});t.test(&apos;one array, one non-array&apos;, function(st) { var aN=1;var a=[aN];var bN=2;var b=[bN];var combinedAnB=utils.combine(aN, b);st.deepEqual(b, [bN], &apos;b is not mutated&apos;);st.notEqual(aN, combinedAnB, &apos;aN+b !==aN&apos;);st.notEqual(a, combinedAnB, &apos;aN+b !==a&apos;);st.notEqual(bN, combinedAnB, &apos;aN+b !==bN&apos;);st.notEqual(b, combinedAnB, &apos;aN+b !==b&apos;);st.deepEqual([1, 2], combinedAnB, &apos;first argument is array-wrapped when not an array&apos;);var combinedABn=utils.combine(a, bN);st.deepEqual(a, [aN], &apos;a is not mutated&apos;);st.notEqual(aN, combinedABn, &apos;a+bN !==aN&apos;);st.notEqual(a, combinedABn, &apos;a+bN !==a&apos;);st.notEqual(bN, combinedABn, &apos;a+bN !==bN&apos;);st.notEqual(b, combinedABn, &apos;a+bN !==b&apos;);st.deepEqual([1, 2], combinedABn, &apos;second argument is array-wrapped when not an array&apos;);st.end();});t.test(&apos;neither is an array&apos;, function(st) { var combined=utils.combine(1, 2);st.notEqual(1, combined, &apos;1+2 !==1&apos;);st.notEqual(2, combined, &apos;1+2 !==2&apos;);st.deepEqual([1, 2], combined, &apos;both arguments are array-wrapped when not an array&apos;);st.end();});t.end();}):&#160;utils.js'],['../qs_2test_2utils_8js.html#a651dd3977dc74ad8ab668d4a8a6934ff',1,'test(&apos;isBuffer()&apos;, function(t) { forEach([null, undefined, true, false, &apos;&apos;, &apos;abc&apos;, 42, 0, NaN, {}, [], function() {},/a/g], function(x) { t.equal(utils.isBuffer(x), false, inspect(x)+&apos; is not a buffer&apos;);});var fakeBuffer={ constructor:Buffer };t.equal(utils.isBuffer(fakeBuffer), false, &apos;fake buffer is not a buffer&apos;);var saferBuffer=SaferBuffer.from(&apos;abc&apos;);t.equal(utils.isBuffer(saferBuffer), true, &apos;SaferBuffer instance is a buffer&apos;);var buffer=Buffer.from &amp;&amp;Buffer.alloc ? Buffer.from(&apos;abc&apos;) :new Buffer(&apos;abc&apos;);t.equal(utils.isBuffer(buffer), true, &apos;real Buffer instance is a buffer&apos;);t.end();}):&#160;utils.js'],['../side-channel_2test_2index_8js.html#a6b27b2fdfd51f62946c5dc377058a4ae',1,'test(&apos;export&apos;, function(t) { t.equal(typeof getSideChannel, &apos;function&apos;, &apos;is a function&apos;);t.equal(getSideChannel.length, 0, &apos;takes no arguments&apos;);var channel=getSideChannel();t.ok(channel, &apos;is truthy&apos;);t.equal(typeof channel, &apos;object&apos;, &apos;is an object&apos;);t.end();}):&#160;index.js'],['../side-channel_2test_2index_8js.html#a3b7ee313559cf1ec645aa00865c9f2bd',1,'test(&apos;assert&apos;, function(t) { var channel=getSideChannel();t[&apos;throws&apos;](function() { channel.assert({});}, TypeError, &apos;nonexistent value throws&apos;);var o={};channel.set(o, &apos;data&apos;);t.doesNotThrow(function() { channel.assert(o);}, &apos;existent value noops&apos;);t.end();}):&#160;index.js'],['../side-channel_2test_2index_8js.html#a025171de4d7d235303297cb573aa60ef',1,'test(&apos;has&apos;, function(t) { var channel=getSideChannel();var o=[];t.equal(channel.has(o), false, &apos;nonexistent value yields false&apos;);channel.set(o, &apos;foo&apos;);t.equal(channel.has(o), true, &apos;existent value yields true&apos;);t.equal(channel.has(&apos;abc&apos;), false, &apos;non object value non existent yields false&apos;);channel.set(&apos;abc&apos;, &apos;foo&apos;);t.equal(channel.has(&apos;abc&apos;), true, &apos;non object value that exists yields true&apos;);t.end();}):&#160;index.js'],['../side-channel_2test_2index_8js.html#a1abc31f1e2fedf45c0eb92948e6a179d',1,'test(&apos;get&apos;, function(t) { var channel=getSideChannel();var o={};t.equal(channel.get(o), undefined, &apos;nonexistent value yields undefined&apos;);var data={};channel.set(o, data);t.equal(channel.get(o), data, &apos;&quot;get&quot; yields data set by &quot;set&quot;&apos;);t.end();}):&#160;index.js'],['../side-channel_2test_2index_8js.html#a73c9a993f068dbd2cfbb4ffe9253ddd2',1,'test(&apos;set&apos;, function(t) { var channel=getSideChannel();var o=function() {};t.equal(channel.get(o), undefined, &apos;value not set&apos;);channel.set(o, 42);t.equal(channel.get(o), 42, &apos;value was set&apos;);channel.set(o, Infinity);t.equal(channel.get(o), Infinity, &apos;value was set again&apos;);var o2={};channel.set(o2, 17);t.equal(channel.get(o), Infinity, &apos;o is not modified&apos;);t.equal(channel.get(o2), 17, &apos;o2 is set&apos;);channel.set(o, 14);t.equal(channel.get(o), 14, &apos;o is modified&apos;);t.equal(channel.get(o2), 17, &apos;o2 is not modified&apos;);t.end();}):&#160;index.js']]],
  ['toobject_1',['toObject',['../object-assign_2index_8js.html#aacf5b8a98582dce85685081294221ae2',1,'index.js']]],
  ['tostr_2',['toStr',['../object-inspect_2index_8js.html#a26440931bb9bbe5455893445cae1f1d5',1,'index.js']]]
];
